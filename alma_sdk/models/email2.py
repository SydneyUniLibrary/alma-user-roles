# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Email2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferred': 'bool',
        'segment_type': 'str',
        'email_address': 'str',
        'description': 'str',
        'email_type': 'list[object]'
    }

    attribute_map = {
        'preferred': 'preferred',
        'segment_type': 'segment_type',
        'email_address': 'email_address',
        'description': 'description',
        'email_type': 'email_type'
    }

    def __init__(self, preferred=None, segment_type=None, email_address=None, description=None, email_type=None):  # noqa: E501
        """Email2 - a model defined in Swagger"""  # noqa: E501
        self._preferred = None
        self._segment_type = None
        self._email_address = None
        self._description = None
        self._email_type = None
        self.discriminator = None
        if preferred is not None:
            self.preferred = preferred
        if segment_type is not None:
            self.segment_type = segment_type
        if email_address is not None:
            self.email_address = email_address
        if description is not None:
            self.description = description
        if email_type is not None:
            self.email_type = email_type

    @property
    def preferred(self):
        """Gets the preferred of this Email2.  # noqa: E501

        Indication whether the email address is the preferred one. Only one address can be defined as preferred.  # noqa: E501

        :return: The preferred of this Email2.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this Email2.

        Indication whether the email address is the preferred one. Only one address can be defined as preferred.  # noqa: E501

        :param preferred: The preferred of this Email2.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    @property
    def segment_type(self):
        """Gets the segment_type of this Email2.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this Email2.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this Email2.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this Email2.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def email_address(self):
        """Gets the email_address of this Email2.  # noqa: E501

        The email address. Mandatory.  # noqa: E501

        :return: The email_address of this Email2.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Email2.

        The email address. Mandatory.  # noqa: E501

        :param email_address: The email_address of this Email2.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def description(self):
        """Gets the description of this Email2.  # noqa: E501

        The email address' related description.  # noqa: E501

        :return: The description of this Email2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Email2.

        The email address' related description.  # noqa: E501

        :param description: The description of this Email2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email_type(self):
        """Gets the email_type of this Email2.  # noqa: E501

        The different email types. Mandatory.  # noqa: E501

        :return: The email_type of this Email2.  # noqa: E501
        :rtype: list[object]
        """
        return self._email_type

    @email_type.setter
    def email_type(self, email_type):
        """Sets the email_type of this Email2.

        The different email types. Mandatory.  # noqa: E501

        :param email_type: The email_type of this Email2.  # noqa: E501
        :type: list[object]
        """

        self._email_type = email_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Email2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Email2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
