# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'object',
        'scope': 'object',
        'role_type': 'object',
        'expiry_date': 'date',
        'parameter': 'list[object]'
    }

    attribute_map = {
        'status': 'status',
        'scope': 'scope',
        'role_type': 'role_type',
        'expiry_date': 'expiry_date',
        'parameter': 'parameter'
    }

    def __init__(self, status=None, scope=None, role_type=None, expiry_date=None, parameter=None):  # noqa: E501
        """UserRole - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._scope = None
        self._role_type = None
        self._expiry_date = None
        self._parameter = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if scope is not None:
            self.scope = scope
        if role_type is not None:
            self.role_type = role_type
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if parameter is not None:
            self.parameter = parameter

    @property
    def status(self):
        """Gets the status of this UserRole.  # noqa: E501

        The user's role status. Possible codes are listed in 'User Roles Status Codes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). If empty, default value is Active, if an illegal value is given, default is Inactive.  # noqa: E501

        :return: The status of this UserRole.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserRole.

        The user's role status. Possible codes are listed in 'User Roles Status Codes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). If empty, default value is Active, if an illegal value is given, default is Inactive.  # noqa: E501

        :param status: The status of this UserRole.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def scope(self):
        """Gets the scope of this UserRole.  # noqa: E501

        The campus/library to which the role applies.  # noqa: E501

        :return: The scope of this UserRole.  # noqa: E501
        :rtype: object
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UserRole.

        The campus/library to which the role applies.  # noqa: E501

        :param scope: The scope of this UserRole.  # noqa: E501
        :type: object
        """

        self._scope = scope

    @property
    def role_type(self):
        """Gets the role_type of this UserRole.  # noqa: E501

        The user's role. Possible codes are listed in 'User Roles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The role_type of this UserRole.  # noqa: E501
        :rtype: object
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this UserRole.

        The user's role. Possible codes are listed in 'User Roles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param role_type: The role_type of this UserRole.  # noqa: E501
        :type: object
        """

        self._role_type = role_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this UserRole.  # noqa: E501

        The date after which the user no longer has the role.  # noqa: E501

        :return: The expiry_date of this UserRole.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this UserRole.

        The date after which the user no longer has the role.  # noqa: E501

        :param expiry_date: The expiry_date of this UserRole.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def parameter(self):
        """Gets the parameter of this UserRole.  # noqa: E501

        Role's related parameters.  # noqa: E501

        :return: The parameter of this UserRole.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this UserRole.

        Role's related parameters.  # noqa: E501

        :param parameter: The parameter of this UserRole.  # noqa: E501
        :type: list[object]
        """

        self._parameter = parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
