# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from alma_sdk.models.pickup_location_types2 import PickupLocationTypes2  # noqa: F401,E501
from alma_sdk.models.request_status import RequestStatus  # noqa: F401,E501
from alma_sdk.models.request_types2 import RequestTypes2  # noqa: F401,E501
from alma_sdk.models.required_pages2 import RequiredPages2  # noqa: F401,E501
from alma_sdk.models.resource_sharing import ResourceSharing  # noqa: F401,E501


class UserRequest2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_primary_id': 'str',
        'request_id': 'str',
        'request_type': 'RequestTypes2',
        'request_sub_type': 'object',
        'mms_id': 'str',
        'title': 'str',
        'author': 'str',
        'description': 'str',
        'pickup_location': 'str',
        'pickup_location_type': 'PickupLocationTypes2',
        'pickup_location_library': 'str',
        'pickup_location_circulation_desk': 'str',
        'target_destination': 'object',
        'material_type': 'object',
        'last_interest_date': 'date',
        'partial_digitization': 'bool',
        'chapter_or_article_title': 'str',
        'chapter_or_article_author': 'str',
        'required_pages_range': 'RequiredPages2',
        'full_chapter': 'str',
        'comment': 'str',
        'request_status': 'RequestStatus',
        'place_in_queue': 'int',
        'request_date': 'date',
        'task_name': 'str',
        'expiry_date': 'date',
        'booking_start_date': 'date',
        'booking_end_date': 'date',
        'adjusted_booking_start_date': 'date',
        'adjusted_booking_end_date': 'date',
        'destination_location': 'object',
        'call_number_type': 'object',
        'call_number': 'str',
        'item_policy': 'object',
        'due_back_date': 'date',
        'item_id': 'str',
        'barcode': 'str',
        'resource_sharing': 'ResourceSharing',
        'copyrights_declaration_signed_by_patron': 'bool'
    }

    attribute_map = {
        'user_primary_id': 'user_primary_id',
        'request_id': 'request_id',
        'request_type': 'request_type',
        'request_sub_type': 'request_sub_type',
        'mms_id': 'mms_id',
        'title': 'title',
        'author': 'author',
        'description': 'description',
        'pickup_location': 'pickup_location',
        'pickup_location_type': 'pickup_location_type',
        'pickup_location_library': 'pickup_location_library',
        'pickup_location_circulation_desk': 'pickup_location_circulation_desk',
        'target_destination': 'target_destination',
        'material_type': 'material_type',
        'last_interest_date': 'last_interest_date',
        'partial_digitization': 'partial_digitization',
        'chapter_or_article_title': 'chapter_or_article_title',
        'chapter_or_article_author': 'chapter_or_article_author',
        'required_pages_range': 'required_pages_range',
        'full_chapter': 'full_chapter',
        'comment': 'comment',
        'request_status': 'request_status',
        'place_in_queue': 'place_in_queue',
        'request_date': 'request_date',
        'task_name': 'task_name',
        'expiry_date': 'expiry_date',
        'booking_start_date': 'booking_start_date',
        'booking_end_date': 'booking_end_date',
        'adjusted_booking_start_date': 'adjusted_booking_start_date',
        'adjusted_booking_end_date': 'adjusted_booking_end_date',
        'destination_location': 'destination_location',
        'call_number_type': 'call_number_type',
        'call_number': 'call_number',
        'item_policy': 'item_policy',
        'due_back_date': 'due_back_date',
        'item_id': 'item_id',
        'barcode': 'barcode',
        'resource_sharing': 'resource_sharing',
        'copyrights_declaration_signed_by_patron': 'copyrights_declaration_signed_by_patron'
    }

    def __init__(self, user_primary_id=None, request_id=None, request_type=None, request_sub_type=None, mms_id=None, title=None, author=None, description=None, pickup_location=None, pickup_location_type=None, pickup_location_library=None, pickup_location_circulation_desk=None, target_destination=None, material_type=None, last_interest_date=None, partial_digitization=None, chapter_or_article_title=None, chapter_or_article_author=None, required_pages_range=None, full_chapter=None, comment=None, request_status=None, place_in_queue=None, request_date=None, task_name=None, expiry_date=None, booking_start_date=None, booking_end_date=None, adjusted_booking_start_date=None, adjusted_booking_end_date=None, destination_location=None, call_number_type=None, call_number=None, item_policy=None, due_back_date=None, item_id=None, barcode=None, resource_sharing=None, copyrights_declaration_signed_by_patron=None):  # noqa: E501
        """UserRequest2 - a model defined in Swagger"""  # noqa: E501
        self._user_primary_id = None
        self._request_id = None
        self._request_type = None
        self._request_sub_type = None
        self._mms_id = None
        self._title = None
        self._author = None
        self._description = None
        self._pickup_location = None
        self._pickup_location_type = None
        self._pickup_location_library = None
        self._pickup_location_circulation_desk = None
        self._target_destination = None
        self._material_type = None
        self._last_interest_date = None
        self._partial_digitization = None
        self._chapter_or_article_title = None
        self._chapter_or_article_author = None
        self._required_pages_range = None
        self._full_chapter = None
        self._comment = None
        self._request_status = None
        self._place_in_queue = None
        self._request_date = None
        self._task_name = None
        self._expiry_date = None
        self._booking_start_date = None
        self._booking_end_date = None
        self._adjusted_booking_start_date = None
        self._adjusted_booking_end_date = None
        self._destination_location = None
        self._call_number_type = None
        self._call_number = None
        self._item_policy = None
        self._due_back_date = None
        self._item_id = None
        self._barcode = None
        self._resource_sharing = None
        self._copyrights_declaration_signed_by_patron = None
        self.discriminator = None
        if user_primary_id is not None:
            self.user_primary_id = user_primary_id
        if request_id is not None:
            self.request_id = request_id
        self.request_type = request_type
        if request_sub_type is not None:
            self.request_sub_type = request_sub_type
        if mms_id is not None:
            self.mms_id = mms_id
        if title is not None:
            self.title = title
        if author is not None:
            self.author = author
        if description is not None:
            self.description = description
        if pickup_location is not None:
            self.pickup_location = pickup_location
        if pickup_location_type is not None:
            self.pickup_location_type = pickup_location_type
        if pickup_location_library is not None:
            self.pickup_location_library = pickup_location_library
        if pickup_location_circulation_desk is not None:
            self.pickup_location_circulation_desk = pickup_location_circulation_desk
        if target_destination is not None:
            self.target_destination = target_destination
        if material_type is not None:
            self.material_type = material_type
        if last_interest_date is not None:
            self.last_interest_date = last_interest_date
        if partial_digitization is not None:
            self.partial_digitization = partial_digitization
        if chapter_or_article_title is not None:
            self.chapter_or_article_title = chapter_or_article_title
        if chapter_or_article_author is not None:
            self.chapter_or_article_author = chapter_or_article_author
        if required_pages_range is not None:
            self.required_pages_range = required_pages_range
        if full_chapter is not None:
            self.full_chapter = full_chapter
        if comment is not None:
            self.comment = comment
        if request_status is not None:
            self.request_status = request_status
        if place_in_queue is not None:
            self.place_in_queue = place_in_queue
        if request_date is not None:
            self.request_date = request_date
        if task_name is not None:
            self.task_name = task_name
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if booking_start_date is not None:
            self.booking_start_date = booking_start_date
        if booking_end_date is not None:
            self.booking_end_date = booking_end_date
        if adjusted_booking_start_date is not None:
            self.adjusted_booking_start_date = adjusted_booking_start_date
        if adjusted_booking_end_date is not None:
            self.adjusted_booking_end_date = adjusted_booking_end_date
        if destination_location is not None:
            self.destination_location = destination_location
        if call_number_type is not None:
            self.call_number_type = call_number_type
        if call_number is not None:
            self.call_number = call_number
        if item_policy is not None:
            self.item_policy = item_policy
        if due_back_date is not None:
            self.due_back_date = due_back_date
        if item_id is not None:
            self.item_id = item_id
        if barcode is not None:
            self.barcode = barcode
        if resource_sharing is not None:
            self.resource_sharing = resource_sharing
        if copyrights_declaration_signed_by_patron is not None:
            self.copyrights_declaration_signed_by_patron = copyrights_declaration_signed_by_patron

    @property
    def user_primary_id(self):
        """Gets the user_primary_id of this UserRequest2.  # noqa: E501

        The primary identifier of the requesting user. Output parameter.  # noqa: E501

        :return: The user_primary_id of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._user_primary_id

    @user_primary_id.setter
    def user_primary_id(self, user_primary_id):
        """Sets the user_primary_id of this UserRequest2.

        The primary identifier of the requesting user. Output parameter.  # noqa: E501

        :param user_primary_id: The user_primary_id of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._user_primary_id = user_primary_id

    @property
    def request_id(self):
        """Gets the request_id of this UserRequest2.  # noqa: E501

        The identifier of the request in Alma. Output parameter. Should be used in subsequent queries regarding the request.  # noqa: E501

        :return: The request_id of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this UserRequest2.

        The identifier of the request in Alma. Output parameter. Should be used in subsequent queries regarding the request.  # noqa: E501

        :param request_id: The request_id of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_type(self):
        """Gets the request_type of this UserRequest2.  # noqa: E501


        :return: The request_type of this UserRequest2.  # noqa: E501
        :rtype: RequestTypes2
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this UserRequest2.


        :param request_type: The request_type of this UserRequest2.  # noqa: E501
        :type: RequestTypes2
        """
        if request_type is None:
            raise ValueError("Invalid value for `request_type`, must not be `None`")  # noqa: E501

        self._request_type = request_type

    @property
    def request_sub_type(self):
        """Gets the request_sub_type of this UserRequest2.  # noqa: E501

        The sub type of the request. Output parameter.  # noqa: E501

        :return: The request_sub_type of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._request_sub_type

    @request_sub_type.setter
    def request_sub_type(self, request_sub_type):
        """Sets the request_sub_type of this UserRequest2.

        The sub type of the request. Output parameter.  # noqa: E501

        :param request_sub_type: The request_sub_type of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._request_sub_type = request_sub_type

    @property
    def mms_id(self):
        """Gets the mms_id of this UserRequest2.  # noqa: E501

        Bibliographic record identifier. Output parameter.  # noqa: E501

        :return: The mms_id of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._mms_id

    @mms_id.setter
    def mms_id(self, mms_id):
        """Sets the mms_id of this UserRequest2.

        Bibliographic record identifier. Output parameter.  # noqa: E501

        :param mms_id: The mms_id of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._mms_id = mms_id

    @property
    def title(self):
        """Gets the title of this UserRequest2.  # noqa: E501

        The title of the requested resource. Output parameter.  # noqa: E501

        :return: The title of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserRequest2.

        The title of the requested resource. Output parameter.  # noqa: E501

        :param title: The title of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def author(self):
        """Gets the author of this UserRequest2.  # noqa: E501

        The author of the requested resource. Output parameter.  # noqa: E501

        :return: The author of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this UserRequest2.

        The author of the requested resource. Output parameter.  # noqa: E501

        :param author: The author of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def description(self):
        """Gets the description of this UserRequest2.  # noqa: E501

        The description of the requested resource when dealing with multi volume/issue resource. For item level requests this is an output parameter. When creating or updating a request for a specific periodical resource, the request is title level, but the specific volume/issue requested is input using this description field (e.g. v.30, #4 Dec, 1966). Please note that this field is sensitive to case and white spaces.  # noqa: E501

        :return: The description of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserRequest2.

        The description of the requested resource when dealing with multi volume/issue resource. For item level requests this is an output parameter. When creating or updating a request for a specific periodical resource, the request is title level, but the specific volume/issue requested is input using this description field (e.g. v.30, #4 Dec, 1966). Please note that this field is sensitive to case and white spaces.  # noqa: E501

        :param description: The description of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pickup_location(self):
        """Gets the pickup_location of this UserRequest2.  # noqa: E501

        Description of the pickup location (library or circulation desk) where the resource will be delivered. Output parameter. Not relevant when request_type = DIGITIZATION.  # noqa: E501

        :return: The pickup_location of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._pickup_location

    @pickup_location.setter
    def pickup_location(self, pickup_location):
        """Sets the pickup_location of this UserRequest2.

        Description of the pickup location (library or circulation desk) where the resource will be delivered. Output parameter. Not relevant when request_type = DIGITIZATION.  # noqa: E501

        :param pickup_location: The pickup_location of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._pickup_location = pickup_location

    @property
    def pickup_location_type(self):
        """Gets the pickup_location_type of this UserRequest2.  # noqa: E501


        :return: The pickup_location_type of this UserRequest2.  # noqa: E501
        :rtype: PickupLocationTypes2
        """
        return self._pickup_location_type

    @pickup_location_type.setter
    def pickup_location_type(self, pickup_location_type):
        """Sets the pickup_location_type of this UserRequest2.


        :param pickup_location_type: The pickup_location_type of this UserRequest2.  # noqa: E501
        :type: PickupLocationTypes2
        """

        self._pickup_location_type = pickup_location_type

    @property
    def pickup_location_library(self):
        """Gets the pickup_location_library of this UserRequest2.  # noqa: E501

        The pickup location library code. Relevant and mandatory when request_type = HOLD or BOOKING. see [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :return: The pickup_location_library of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._pickup_location_library

    @pickup_location_library.setter
    def pickup_location_library(self, pickup_location_library):
        """Sets the pickup_location_library of this UserRequest2.

        The pickup location library code. Relevant and mandatory when request_type = HOLD or BOOKING. see [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :param pickup_location_library: The pickup_location_library of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._pickup_location_library = pickup_location_library

    @property
    def pickup_location_circulation_desk(self):
        """Gets the pickup_location_circulation_desk of this UserRequest2.  # noqa: E501

        The pickup location circulation desk code. Relevant when request_type = HOLD or BOOKING, if pickup_location_type = CIRCULATION_DESK.  # noqa: E501

        :return: The pickup_location_circulation_desk of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._pickup_location_circulation_desk

    @pickup_location_circulation_desk.setter
    def pickup_location_circulation_desk(self, pickup_location_circulation_desk):
        """Sets the pickup_location_circulation_desk of this UserRequest2.

        The pickup location circulation desk code. Relevant when request_type = HOLD or BOOKING, if pickup_location_type = CIRCULATION_DESK.  # noqa: E501

        :param pickup_location_circulation_desk: The pickup_location_circulation_desk of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._pickup_location_circulation_desk = pickup_location_circulation_desk

    @property
    def target_destination(self):
        """Gets the target_destination of this UserRequest2.  # noqa: E501

        The code of the department chosen to fulfill the digitization or work order request. A list of relevant departments can be retrieved using GET /almaws/v1/conf/departments?Type=DIGI  # noqa: E501

        :return: The target_destination of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._target_destination

    @target_destination.setter
    def target_destination(self, target_destination):
        """Sets the target_destination of this UserRequest2.

        The code of the department chosen to fulfill the digitization or work order request. A list of relevant departments can be retrieved using GET /almaws/v1/conf/departments?Type=DIGI  # noqa: E501

        :param target_destination: The target_destination of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._target_destination = target_destination

    @property
    def material_type(self):
        """Gets the material_type of this UserRequest2.  # noqa: E501

        The requested material type code. Optional. Possible codes are listed in 'Physical Material Type' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is output parameter when the request is in item level, and input parameter when the request is in title level.  # noqa: E501

        :return: The material_type of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this UserRequest2.

        The requested material type code. Optional. Possible codes are listed in 'Physical Material Type' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is output parameter when the request is in item level, and input parameter when the request is in title level.  # noqa: E501

        :param material_type: The material_type of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._material_type = material_type

    @property
    def last_interest_date(self):
        """Gets the last_interest_date of this UserRequest2.  # noqa: E501

        The last date for which the request is needed. Optional.  # noqa: E501

        :return: The last_interest_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._last_interest_date

    @last_interest_date.setter
    def last_interest_date(self, last_interest_date):
        """Sets the last_interest_date of this UserRequest2.

        The last date for which the request is needed. Optional.  # noqa: E501

        :param last_interest_date: The last_interest_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._last_interest_date = last_interest_date

    @property
    def partial_digitization(self):
        """Gets the partial_digitization of this UserRequest2.  # noqa: E501

        Indication whether the digitization is partial or full. Relevant and mandatory when request_type = DIGITIZATION.  # noqa: E501

        :return: The partial_digitization of this UserRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._partial_digitization

    @partial_digitization.setter
    def partial_digitization(self, partial_digitization):
        """Sets the partial_digitization of this UserRequest2.

        Indication whether the digitization is partial or full. Relevant and mandatory when request_type = DIGITIZATION.  # noqa: E501

        :param partial_digitization: The partial_digitization of this UserRequest2.  # noqa: E501
        :type: bool
        """

        self._partial_digitization = partial_digitization

    @property
    def chapter_or_article_title(self):
        """Gets the chapter_or_article_title of this UserRequest2.  # noqa: E501

        The title of the chapter or article.  # noqa: E501

        :return: The chapter_or_article_title of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._chapter_or_article_title

    @chapter_or_article_title.setter
    def chapter_or_article_title(self, chapter_or_article_title):
        """Sets the chapter_or_article_title of this UserRequest2.

        The title of the chapter or article.  # noqa: E501

        :param chapter_or_article_title: The chapter_or_article_title of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._chapter_or_article_title = chapter_or_article_title

    @property
    def chapter_or_article_author(self):
        """Gets the chapter_or_article_author of this UserRequest2.  # noqa: E501

        The author of the chapter or article.  # noqa: E501

        :return: The chapter_or_article_author of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._chapter_or_article_author

    @chapter_or_article_author.setter
    def chapter_or_article_author(self, chapter_or_article_author):
        """Sets the chapter_or_article_author of this UserRequest2.

        The author of the chapter or article.  # noqa: E501

        :param chapter_or_article_author: The chapter_or_article_author of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._chapter_or_article_author = chapter_or_article_author

    @property
    def required_pages_range(self):
        """Gets the required_pages_range of this UserRequest2.  # noqa: E501


        :return: The required_pages_range of this UserRequest2.  # noqa: E501
        :rtype: RequiredPages2
        """
        return self._required_pages_range

    @required_pages_range.setter
    def required_pages_range(self, required_pages_range):
        """Sets the required_pages_range of this UserRequest2.


        :param required_pages_range: The required_pages_range of this UserRequest2.  # noqa: E501
        :type: RequiredPages2
        """

        self._required_pages_range = required_pages_range

    @property
    def full_chapter(self):
        """Gets the full_chapter of this UserRequest2.  # noqa: E501

        An indication whether the full chapter is requested for digitization. Valid options are: true of false (lower case).  # noqa: E501

        :return: The full_chapter of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._full_chapter

    @full_chapter.setter
    def full_chapter(self, full_chapter):
        """Sets the full_chapter of this UserRequest2.

        An indication whether the full chapter is requested for digitization. Valid options are: true of false (lower case).  # noqa: E501

        :param full_chapter: The full_chapter of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._full_chapter = full_chapter

    @property
    def comment(self):
        """Gets the comment of this UserRequest2.  # noqa: E501

        The related comment of the request. Mandatory when request_type = DIGITIZATION and partial_digitization is true.  # noqa: E501

        :return: The comment of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UserRequest2.

        The related comment of the request. Mandatory when request_type = DIGITIZATION and partial_digitization is true.  # noqa: E501

        :param comment: The comment of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def request_status(self):
        """Gets the request_status of this UserRequest2.  # noqa: E501


        :return: The request_status of this UserRequest2.  # noqa: E501
        :rtype: RequestStatus
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this UserRequest2.


        :param request_status: The request_status of this UserRequest2.  # noqa: E501
        :type: RequestStatus
        """

        self._request_status = request_status

    @property
    def place_in_queue(self):
        """Gets the place_in_queue of this UserRequest2.  # noqa: E501

        The place in queue of the request. Output parameter.  # noqa: E501

        :return: The place_in_queue of this UserRequest2.  # noqa: E501
        :rtype: int
        """
        return self._place_in_queue

    @place_in_queue.setter
    def place_in_queue(self, place_in_queue):
        """Sets the place_in_queue of this UserRequest2.

        The place in queue of the request. Output parameter.  # noqa: E501

        :param place_in_queue: The place_in_queue of this UserRequest2.  # noqa: E501
        :type: int
        """

        self._place_in_queue = place_in_queue

    @property
    def request_date(self):
        """Gets the request_date of this UserRequest2.  # noqa: E501

        The creation date of the request. Output parameter.  # noqa: E501

        :return: The request_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this UserRequest2.

        The creation date of the request. Output parameter.  # noqa: E501

        :param request_date: The request_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._request_date = request_date

    @property
    def task_name(self):
        """Gets the task_name of this UserRequest2.  # noqa: E501

        The task name. Output parameter.  # noqa: E501

        :return: The task_name of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this UserRequest2.

        The task name. Output parameter.  # noqa: E501

        :param task_name: The task_name of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def expiry_date(self):
        """Gets the expiry_date of this UserRequest2.  # noqa: E501

        The expiry date of the request. Output parameter.  # noqa: E501

        :return: The expiry_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this UserRequest2.

        The expiry date of the request. Output parameter.  # noqa: E501

        :param expiry_date: The expiry_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def booking_start_date(self):
        """Gets the booking_start_date of this UserRequest2.  # noqa: E501

        The start date in which the request is needed. Relevant and mandatory when request_type = BOOKING.  # noqa: E501

        :return: The booking_start_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._booking_start_date

    @booking_start_date.setter
    def booking_start_date(self, booking_start_date):
        """Sets the booking_start_date of this UserRequest2.

        The start date in which the request is needed. Relevant and mandatory when request_type = BOOKING.  # noqa: E501

        :param booking_start_date: The booking_start_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._booking_start_date = booking_start_date

    @property
    def booking_end_date(self):
        """Gets the booking_end_date of this UserRequest2.  # noqa: E501

        The end date in which the request is needed. Relevant and mandatory when request_type = BOOKING.  # noqa: E501

        :return: The booking_end_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._booking_end_date

    @booking_end_date.setter
    def booking_end_date(self, booking_end_date):
        """Sets the booking_end_date of this UserRequest2.

        The end date in which the request is needed. Relevant and mandatory when request_type = BOOKING.  # noqa: E501

        :param booking_end_date: The booking_end_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._booking_end_date = booking_end_date

    @property
    def adjusted_booking_start_date(self):
        """Gets the adjusted_booking_start_date of this UserRequest2.  # noqa: E501

        The actual start date of the request, as calculated by the system. Relevant when request_type = BOOKING. Output parameter.  # noqa: E501

        :return: The adjusted_booking_start_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._adjusted_booking_start_date

    @adjusted_booking_start_date.setter
    def adjusted_booking_start_date(self, adjusted_booking_start_date):
        """Sets the adjusted_booking_start_date of this UserRequest2.

        The actual start date of the request, as calculated by the system. Relevant when request_type = BOOKING. Output parameter.  # noqa: E501

        :param adjusted_booking_start_date: The adjusted_booking_start_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._adjusted_booking_start_date = adjusted_booking_start_date

    @property
    def adjusted_booking_end_date(self):
        """Gets the adjusted_booking_end_date of this UserRequest2.  # noqa: E501

        The actual end date of the request, as calculated by the system. Relevant when request_type = BOOKING. Output parameter.  # noqa: E501

        :return: The adjusted_booking_end_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._adjusted_booking_end_date

    @adjusted_booking_end_date.setter
    def adjusted_booking_end_date(self, adjusted_booking_end_date):
        """Sets the adjusted_booking_end_date of this UserRequest2.

        The actual end date of the request, as calculated by the system. Relevant when request_type = BOOKING. Output parameter.  # noqa: E501

        :param adjusted_booking_end_date: The adjusted_booking_end_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._adjusted_booking_end_date = adjusted_booking_end_date

    @property
    def destination_location(self):
        """Gets the destination_location of this UserRequest2.  # noqa: E501

        The location in the library to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :return: The destination_location of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._destination_location

    @destination_location.setter
    def destination_location(self, destination_location):
        """Sets the destination_location of this UserRequest2.

        The location in the library to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :param destination_location: The destination_location of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._destination_location = destination_location

    @property
    def call_number_type(self):
        """Gets the call_number_type of this UserRequest2.  # noqa: E501

        The call number type of the holding to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :return: The call_number_type of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._call_number_type

    @call_number_type.setter
    def call_number_type(self, call_number_type):
        """Sets the call_number_type of this UserRequest2.

        The call number type of the holding to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :param call_number_type: The call_number_type of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._call_number_type = call_number_type

    @property
    def call_number(self):
        """Gets the call_number of this UserRequest2.  # noqa: E501

        The call number of the holding to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :return: The call_number of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """Sets the call_number of this UserRequest2.

        The call number of the holding to which the item is to be moved. Relevant when request_type = MOVE.  # noqa: E501

        :param call_number: The call_number of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._call_number = call_number

    @property
    def item_policy(self):
        """Gets the item_policy of this UserRequest2.  # noqa: E501

        The item policy to be applied in the new location. Relevant when request_type = MOVE.  # noqa: E501

        :return: The item_policy of this UserRequest2.  # noqa: E501
        :rtype: object
        """
        return self._item_policy

    @item_policy.setter
    def item_policy(self, item_policy):
        """Sets the item_policy of this UserRequest2.

        The item policy to be applied in the new location. Relevant when request_type = MOVE.  # noqa: E501

        :param item_policy: The item_policy of this UserRequest2.  # noqa: E501
        :type: object
        """

        self._item_policy = item_policy

    @property
    def due_back_date(self):
        """Gets the due_back_date of this UserRequest2.  # noqa: E501

        The date the item is due back. Relevant when request_type = MOVE and request_sub_type = MOVE_TO_TEMPORARY.  # noqa: E501

        :return: The due_back_date of this UserRequest2.  # noqa: E501
        :rtype: date
        """
        return self._due_back_date

    @due_back_date.setter
    def due_back_date(self, due_back_date):
        """Sets the due_back_date of this UserRequest2.

        The date the item is due back. Relevant when request_type = MOVE and request_sub_type = MOVE_TO_TEMPORARY.  # noqa: E501

        :param due_back_date: The due_back_date of this UserRequest2.  # noqa: E501
        :type: date
        """

        self._due_back_date = due_back_date

    @property
    def item_id(self):
        """Gets the item_id of this UserRequest2.  # noqa: E501

        Item pid of the request's related item. Output parameter. Relevant only when the request is in item level or is bound to a single item.  # noqa: E501

        :return: The item_id of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this UserRequest2.

        Item pid of the request's related item. Output parameter. Relevant only when the request is in item level or is bound to a single item.  # noqa: E501

        :param item_id: The item_id of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def barcode(self):
        """Gets the barcode of this UserRequest2.  # noqa: E501

        Barcode of the request's related item. Output parameter. Relevant only when the request is in item level or is bound to a single item.  # noqa: E501

        :return: The barcode of this UserRequest2.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this UserRequest2.

        Barcode of the request's related item. Output parameter. Relevant only when the request is in item level or is bound to a single item.  # noqa: E501

        :param barcode: The barcode of this UserRequest2.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def resource_sharing(self):
        """Gets the resource_sharing of this UserRequest2.  # noqa: E501


        :return: The resource_sharing of this UserRequest2.  # noqa: E501
        :rtype: ResourceSharing
        """
        return self._resource_sharing

    @resource_sharing.setter
    def resource_sharing(self, resource_sharing):
        """Sets the resource_sharing of this UserRequest2.


        :param resource_sharing: The resource_sharing of this UserRequest2.  # noqa: E501
        :type: ResourceSharing
        """

        self._resource_sharing = resource_sharing

    @property
    def copyrights_declaration_signed_by_patron(self):
        """Gets the copyrights_declaration_signed_by_patron of this UserRequest2.  # noqa: E501

        An indication whether copyrights declaration was signed by patron. Relevant for patron digitization requests only.  # noqa: E501

        :return: The copyrights_declaration_signed_by_patron of this UserRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._copyrights_declaration_signed_by_patron

    @copyrights_declaration_signed_by_patron.setter
    def copyrights_declaration_signed_by_patron(self, copyrights_declaration_signed_by_patron):
        """Sets the copyrights_declaration_signed_by_patron of this UserRequest2.

        An indication whether copyrights declaration was signed by patron. Relevant for patron digitization requests only.  # noqa: E501

        :param copyrights_declaration_signed_by_patron: The copyrights_declaration_signed_by_patron of this UserRequest2.  # noqa: E501
        :type: bool
        """

        self._copyrights_declaration_signed_by_patron = copyrights_declaration_signed_by_patron

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRequest2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRequest2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
