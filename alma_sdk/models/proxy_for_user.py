# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProxyForUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'primary_id': 'str',
        'full_name': 'str'
    }

    attribute_map = {
        'link': 'link',
        'primary_id': 'primary_id',
        'full_name': 'full_name'
    }

    def __init__(self, link=None, primary_id=None, full_name=None):  # noqa: E501
        """ProxyForUser - a model defined in Swagger"""  # noqa: E501
        self._link = None
        self._primary_id = None
        self._full_name = None
        self.discriminator = None
        if link is not None:
            self.link = link
        if primary_id is not None:
            self.primary_id = primary_id
        if full_name is not None:
            self.full_name = full_name

    @property
    def link(self):
        """Gets the link of this ProxyForUser.  # noqa: E501


        :return: The link of this ProxyForUser.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ProxyForUser.


        :param link: The link of this ProxyForUser.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def primary_id(self):
        """Gets the primary_id of this ProxyForUser.  # noqa: E501

        The primary identifier.  # noqa: E501

        :return: The primary_id of this ProxyForUser.  # noqa: E501
        :rtype: str
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """Sets the primary_id of this ProxyForUser.

        The primary identifier.  # noqa: E501

        :param primary_id: The primary_id of this ProxyForUser.  # noqa: E501
        :type: str
        """

        self._primary_id = primary_id

    @property
    def full_name(self):
        """Gets the full_name of this ProxyForUser.  # noqa: E501

        The user's first and last name.  # noqa: E501

        :return: The full_name of this ProxyForUser.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ProxyForUser.

        The user's first and last name.  # noqa: E501

        :param full_name: The full_name of this ProxyForUser.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyForUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyForUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
