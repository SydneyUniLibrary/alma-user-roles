# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Address2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferred': 'bool',
        'segment_type': 'str',
        'line1': 'str',
        'line2': 'str',
        'line3': 'str',
        'line4': 'str',
        'line5': 'str',
        'city': 'str',
        'state_province': 'str',
        'postal_code': 'str',
        'country': 'object',
        'address_note': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'address_type': 'list[object]'
    }

    attribute_map = {
        'preferred': 'preferred',
        'segment_type': 'segment_type',
        'line1': 'line1',
        'line2': 'line2',
        'line3': 'line3',
        'line4': 'line4',
        'line5': 'line5',
        'city': 'city',
        'state_province': 'state_province',
        'postal_code': 'postal_code',
        'country': 'country',
        'address_note': 'address_note',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'address_type': 'address_type'
    }

    def __init__(self, preferred=None, segment_type=None, line1=None, line2=None, line3=None, line4=None, line5=None, city=None, state_province=None, postal_code=None, country=None, address_note=None, start_date=None, end_date=None, address_type=None):  # noqa: E501
        """Address2 - a model defined in Swagger"""  # noqa: E501
        self._preferred = None
        self._segment_type = None
        self._line1 = None
        self._line2 = None
        self._line3 = None
        self._line4 = None
        self._line5 = None
        self._city = None
        self._state_province = None
        self._postal_code = None
        self._country = None
        self._address_note = None
        self._start_date = None
        self._end_date = None
        self._address_type = None
        self.discriminator = None
        if preferred is not None:
            self.preferred = preferred
        if segment_type is not None:
            self.segment_type = segment_type
        if line1 is not None:
            self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if line3 is not None:
            self.line3 = line3
        if line4 is not None:
            self.line4 = line4
        if line5 is not None:
            self.line5 = line5
        if city is not None:
            self.city = city
        if state_province is not None:
            self.state_province = state_province
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if address_note is not None:
            self.address_note = address_note
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if address_type is not None:
            self.address_type = address_type

    @property
    def preferred(self):
        """Gets the preferred of this Address2.  # noqa: E501

        Indication whether the address is the preferred one. Only one address can be defined as preferred.  # noqa: E501

        :return: The preferred of this Address2.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this Address2.

        Indication whether the address is the preferred one. Only one address can be defined as preferred.  # noqa: E501

        :param preferred: The preferred of this Address2.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    @property
    def segment_type(self):
        """Gets the segment_type of this Address2.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this Address2.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this Address2.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def line1(self):
        """Gets the line1 of this Address2.  # noqa: E501

        Line 1 of the address. Mandatory.  # noqa: E501

        :return: The line1 of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this Address2.

        Line 1 of the address. Mandatory.  # noqa: E501

        :param line1: The line1 of this Address2.  # noqa: E501
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this Address2.  # noqa: E501

        Line 2 of the address.  # noqa: E501

        :return: The line2 of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this Address2.

        Line 2 of the address.  # noqa: E501

        :param line2: The line2 of this Address2.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this Address2.  # noqa: E501

        Line 3 of the address.  # noqa: E501

        :return: The line3 of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this Address2.

        Line 3 of the address.  # noqa: E501

        :param line3: The line3 of this Address2.  # noqa: E501
        :type: str
        """

        self._line3 = line3

    @property
    def line4(self):
        """Gets the line4 of this Address2.  # noqa: E501

        Line 4 of the address.  # noqa: E501

        :return: The line4 of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._line4

    @line4.setter
    def line4(self, line4):
        """Sets the line4 of this Address2.

        Line 4 of the address.  # noqa: E501

        :param line4: The line4 of this Address2.  # noqa: E501
        :type: str
        """

        self._line4 = line4

    @property
    def line5(self):
        """Gets the line5 of this Address2.  # noqa: E501

        Line 5 of the address.  # noqa: E501

        :return: The line5 of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._line5

    @line5.setter
    def line5(self, line5):
        """Sets the line5 of this Address2.

        Line 5 of the address.  # noqa: E501

        :param line5: The line5 of this Address2.  # noqa: E501
        :type: str
        """

        self._line5 = line5

    @property
    def city(self):
        """Gets the city of this Address2.  # noqa: E501

        The address' relevant city. Mandatory.  # noqa: E501

        :return: The city of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address2.

        The address' relevant city. Mandatory.  # noqa: E501

        :param city: The city of this Address2.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_province(self):
        """Gets the state_province of this Address2.  # noqa: E501

        The address' relevant state.  # noqa: E501

        :return: The state_province of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this Address2.

        The address' relevant state.  # noqa: E501

        :param state_province: The state_province of this Address2.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def postal_code(self):
        """Gets the postal_code of this Address2.  # noqa: E501

        The address' relevant postal code.  # noqa: E501

        :return: The postal_code of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address2.

        The address' relevant postal code.  # noqa: E501

        :param postal_code: The postal_code of this Address2.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this Address2.  # noqa: E501

        The address' relevant country. Possible codes are listed in the 'Country Codes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The country of this Address2.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address2.

        The address' relevant country. Possible codes are listed in the 'Country Codes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param country: The country of this Address2.  # noqa: E501
        :type: object
        """

        self._country = country

    @property
    def address_note(self):
        """Gets the address_note of this Address2.  # noqa: E501

        The address' related note.  # noqa: E501

        :return: The address_note of this Address2.  # noqa: E501
        :rtype: str
        """
        return self._address_note

    @address_note.setter
    def address_note(self, address_note):
        """Sets the address_note of this Address2.

        The address' related note.  # noqa: E501

        :param address_note: The address_note of this Address2.  # noqa: E501
        :type: str
        """

        self._address_note = address_note

    @property
    def start_date(self):
        """Gets the start_date of this Address2.  # noqa: E501

        The date from which the address is deemed to be active.  # noqa: E501

        :return: The start_date of this Address2.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Address2.

        The date from which the address is deemed to be active.  # noqa: E501

        :param start_date: The start_date of this Address2.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Address2.  # noqa: E501

        The date after which the address is no longer active.  # noqa: E501

        :return: The end_date of this Address2.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Address2.

        The date after which the address is no longer active.  # noqa: E501

        :param end_date: The end_date of this Address2.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def address_type(self):
        """Gets the address_type of this Address2.  # noqa: E501

        Address types. Mandatory.  # noqa: E501

        :return: The address_type of this Address2.  # noqa: E501
        :rtype: list[object]
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this Address2.

        Address types. Mandatory.  # noqa: E501

        :param address_type: The address_type of this Address2.  # noqa: E501
        :type: list[object]
        """

        self._address_type = address_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
