# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserStatistic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_type': 'str',
        'statistic_category': 'object',
        'category_type': 'object',
        'statistic_note': 'str'
    }

    attribute_map = {
        'segment_type': 'segment_type',
        'statistic_category': 'statistic_category',
        'category_type': 'category_type',
        'statistic_note': 'statistic_note'
    }

    def __init__(self, segment_type=None, statistic_category=None, category_type=None, statistic_note=None):  # noqa: E501
        """UserStatistic - a model defined in Swagger"""  # noqa: E501
        self._segment_type = None
        self._statistic_category = None
        self._category_type = None
        self._statistic_note = None
        self.discriminator = None
        if segment_type is not None:
            self.segment_type = segment_type
        self.statistic_category = statistic_category
        if category_type is not None:
            self.category_type = category_type
        if statistic_note is not None:
            self.statistic_note = statistic_note

    @property
    def segment_type(self):
        """Gets the segment_type of this UserStatistic.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this UserStatistic.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this UserStatistic.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this UserStatistic.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def statistic_category(self):
        """Gets the statistic_category of this UserStatistic.  # noqa: E501

        The statistic's Categories. Possible codes are listed in 'User Statistical Categories' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The statistic_category of this UserStatistic.  # noqa: E501
        :rtype: object
        """
        return self._statistic_category

    @statistic_category.setter
    def statistic_category(self, statistic_category):
        """Sets the statistic_category of this UserStatistic.

        The statistic's Categories. Possible codes are listed in 'User Statistical Categories' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param statistic_category: The statistic_category of this UserStatistic.  # noqa: E501
        :type: object
        """
        if statistic_category is None:
            raise ValueError("Invalid value for `statistic_category`, must not be `None`")  # noqa: E501

        self._statistic_category = statistic_category

    @property
    def category_type(self):
        """Gets the category_type of this UserStatistic.  # noqa: E501

        The statistic's type. Possible codes are listed in 'User Category Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Output parameter.  # noqa: E501

        :return: The category_type of this UserStatistic.  # noqa: E501
        :rtype: object
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this UserStatistic.

        The statistic's type. Possible codes are listed in 'User Category Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Output parameter.  # noqa: E501

        :param category_type: The category_type of this UserStatistic.  # noqa: E501
        :type: object
        """

        self._category_type = category_type

    @property
    def statistic_note(self):
        """Gets the statistic_note of this UserStatistic.  # noqa: E501

        The statistic's related note.  # noqa: E501

        :return: The statistic_note of this UserStatistic.  # noqa: E501
        :rtype: str
        """
        return self._statistic_note

    @statistic_note.setter
    def statistic_note(self, statistic_note):
        """Sets the statistic_note of this UserStatistic.

        The statistic's related note.  # noqa: E501

        :param statistic_note: The statistic_note of this UserStatistic.  # noqa: E501
        :type: str
        """

        self._statistic_note = statistic_note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserStatistic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserStatistic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
