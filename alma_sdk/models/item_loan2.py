# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from alma_sdk.models.loan_status import LoanStatus  # noqa: F401,E501
from alma_sdk.models.numeric_string import NumericString  # noqa: F401,E501


class ItemLoan2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_id': 'str',
        'circ_desk': 'object',
        'library': 'object',
        'user_id': 'str',
        'item_barcode': 'str',
        'due_date': 'date',
        'loan_status': 'LoanStatus',
        'loan_date': 'date',
        'process_status': 'str',
        'mms_id': 'str',
        'holding_id': 'str',
        'item_id': 'str',
        'title': 'str',
        'author': 'str',
        'description': 'str',
        'publication_year': 'NumericString',
        'location_code': 'object',
        'item_policy': 'object',
        'call_number': 'str',
        'loan_fine': 'float',
        'renewable': 'bool'
    }

    attribute_map = {
        'loan_id': 'loan_id',
        'circ_desk': 'circ_desk',
        'library': 'library',
        'user_id': 'user_id',
        'item_barcode': 'item_barcode',
        'due_date': 'due_date',
        'loan_status': 'loan_status',
        'loan_date': 'loan_date',
        'process_status': 'process_status',
        'mms_id': 'mms_id',
        'holding_id': 'holding_id',
        'item_id': 'item_id',
        'title': 'title',
        'author': 'author',
        'description': 'description',
        'publication_year': 'publication_year',
        'location_code': 'location_code',
        'item_policy': 'item_policy',
        'call_number': 'call_number',
        'loan_fine': 'loan_fine',
        'renewable': 'renewable'
    }

    def __init__(self, loan_id=None, circ_desk=None, library=None, user_id=None, item_barcode=None, due_date=None, loan_status=None, loan_date=None, process_status=None, mms_id=None, holding_id=None, item_id=None, title=None, author=None, description=None, publication_year=None, location_code=None, item_policy=None, call_number=None, loan_fine=None, renewable=None):  # noqa: E501
        """ItemLoan2 - a model defined in Swagger"""  # noqa: E501
        self._loan_id = None
        self._circ_desk = None
        self._library = None
        self._user_id = None
        self._item_barcode = None
        self._due_date = None
        self._loan_status = None
        self._loan_date = None
        self._process_status = None
        self._mms_id = None
        self._holding_id = None
        self._item_id = None
        self._title = None
        self._author = None
        self._description = None
        self._publication_year = None
        self._location_code = None
        self._item_policy = None
        self._call_number = None
        self._loan_fine = None
        self._renewable = None
        self.discriminator = None
        if loan_id is not None:
            self.loan_id = loan_id
        self.circ_desk = circ_desk
        self.library = library
        if user_id is not None:
            self.user_id = user_id
        if item_barcode is not None:
            self.item_barcode = item_barcode
        if due_date is not None:
            self.due_date = due_date
        if loan_status is not None:
            self.loan_status = loan_status
        if loan_date is not None:
            self.loan_date = loan_date
        if process_status is not None:
            self.process_status = process_status
        if mms_id is not None:
            self.mms_id = mms_id
        if holding_id is not None:
            self.holding_id = holding_id
        if item_id is not None:
            self.item_id = item_id
        if title is not None:
            self.title = title
        if author is not None:
            self.author = author
        if description is not None:
            self.description = description
        if publication_year is not None:
            self.publication_year = publication_year
        if location_code is not None:
            self.location_code = location_code
        if item_policy is not None:
            self.item_policy = item_policy
        if call_number is not None:
            self.call_number = call_number
        if loan_fine is not None:
            self.loan_fine = loan_fine
        if renewable is not None:
            self.renewable = renewable

    @property
    def loan_id(self):
        """Gets the loan_id of this ItemLoan2.  # noqa: E501

        Identifier of the loan in Alma. Should be used in subsequent queries regarding the loan.  # noqa: E501

        :return: The loan_id of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this ItemLoan2.

        Identifier of the loan in Alma. Should be used in subsequent queries regarding the loan.  # noqa: E501

        :param loan_id: The loan_id of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._loan_id = loan_id

    @property
    def circ_desk(self):
        """Gets the circ_desk of this ItemLoan2.  # noqa: E501

        The circulation desk code that is responsible of the loan. Mandatory.  # noqa: E501

        :return: The circ_desk of this ItemLoan2.  # noqa: E501
        :rtype: object
        """
        return self._circ_desk

    @circ_desk.setter
    def circ_desk(self, circ_desk):
        """Sets the circ_desk of this ItemLoan2.

        The circulation desk code that is responsible of the loan. Mandatory.  # noqa: E501

        :param circ_desk: The circ_desk of this ItemLoan2.  # noqa: E501
        :type: object
        """
        if circ_desk is None:
            raise ValueError("Invalid value for `circ_desk`, must not be `None`")  # noqa: E501

        self._circ_desk = circ_desk

    @property
    def library(self):
        """Gets the library of this ItemLoan2.  # noqa: E501

        The library code that is responsible of the loan. Mandatory.  # noqa: E501

        :return: The library of this ItemLoan2.  # noqa: E501
        :rtype: object
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this ItemLoan2.

        The library code that is responsible of the loan. Mandatory.  # noqa: E501

        :param library: The library of this ItemLoan2.  # noqa: E501
        :type: object
        """
        if library is None:
            raise ValueError("Invalid value for `library`, must not be `None`")  # noqa: E501

        self._library = library

    @property
    def user_id(self):
        """Gets the user_id of this ItemLoan2.  # noqa: E501

        The loaning user identifier. Output parameter.  # noqa: E501

        :return: The user_id of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ItemLoan2.

        The loaning user identifier. Output parameter.  # noqa: E501

        :param user_id: The user_id of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def item_barcode(self):
        """Gets the item_barcode of this ItemLoan2.  # noqa: E501

        The barcode of the loaned item. Output parameter.  # noqa: E501

        :return: The item_barcode of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._item_barcode

    @item_barcode.setter
    def item_barcode(self, item_barcode):
        """Sets the item_barcode of this ItemLoan2.

        The barcode of the loaned item. Output parameter.  # noqa: E501

        :param item_barcode: The item_barcode of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._item_barcode = item_barcode

    @property
    def due_date(self):
        """Gets the due_date of this ItemLoan2.  # noqa: E501

        The loan's due date. Can be modified using PUT or the renew API.  # noqa: E501

        :return: The due_date of this ItemLoan2.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ItemLoan2.

        The loan's due date. Can be modified using PUT or the renew API.  # noqa: E501

        :param due_date: The due_date of this ItemLoan2.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def loan_status(self):
        """Gets the loan_status of this ItemLoan2.  # noqa: E501


        :return: The loan_status of this ItemLoan2.  # noqa: E501
        :rtype: LoanStatus
        """
        return self._loan_status

    @loan_status.setter
    def loan_status(self, loan_status):
        """Sets the loan_status of this ItemLoan2.


        :param loan_status: The loan_status of this ItemLoan2.  # noqa: E501
        :type: LoanStatus
        """

        self._loan_status = loan_status

    @property
    def loan_date(self):
        """Gets the loan_date of this ItemLoan2.  # noqa: E501

        The date in which the loan took place. Output parameter. In the POST loan action, Alma populate this field with the current date and time.  # noqa: E501

        :return: The loan_date of this ItemLoan2.  # noqa: E501
        :rtype: date
        """
        return self._loan_date

    @loan_date.setter
    def loan_date(self, loan_date):
        """Sets the loan_date of this ItemLoan2.

        The date in which the loan took place. Output parameter. In the POST loan action, Alma populate this field with the current date and time.  # noqa: E501

        :param loan_date: The loan_date of this ItemLoan2.  # noqa: E501
        :type: date
        """

        self._loan_date = loan_date

    @property
    def process_status(self):
        """Gets the process_status of this ItemLoan2.  # noqa: E501

        The loan's process status. Output parameter. Possible codes are listed in 'Loan Process Status Search Column' code-table.  # noqa: E501

        :return: The process_status of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this ItemLoan2.

        The loan's process status. Output parameter. Possible codes are listed in 'Loan Process Status Search Column' code-table.  # noqa: E501

        :param process_status: The process_status of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._process_status = process_status

    @property
    def mms_id(self):
        """Gets the mms_id of this ItemLoan2.  # noqa: E501

        Bibliographic record identifier. Output parameter.  # noqa: E501

        :return: The mms_id of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._mms_id

    @mms_id.setter
    def mms_id(self, mms_id):
        """Sets the mms_id of this ItemLoan2.

        Bibliographic record identifier. Output parameter.  # noqa: E501

        :param mms_id: The mms_id of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._mms_id = mms_id

    @property
    def holding_id(self):
        """Gets the holding_id of this ItemLoan2.  # noqa: E501

        Holdings id that the item is associated with. Output parameter.  # noqa: E501

        :return: The holding_id of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._holding_id

    @holding_id.setter
    def holding_id(self, holding_id):
        """Sets the holding_id of this ItemLoan2.

        Holdings id that the item is associated with. Output parameter.  # noqa: E501

        :param holding_id: The holding_id of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._holding_id = holding_id

    @property
    def item_id(self):
        """Gets the item_id of this ItemLoan2.  # noqa: E501

        Physical item pid of the item. Output parameter  # noqa: E501

        :return: The item_id of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ItemLoan2.

        Physical item pid of the item. Output parameter  # noqa: E501

        :param item_id: The item_id of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def title(self):
        """Gets the title of this ItemLoan2.  # noqa: E501

        The title of the loaned item. Output parameter.  # noqa: E501

        :return: The title of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemLoan2.

        The title of the loaned item. Output parameter.  # noqa: E501

        :param title: The title of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def author(self):
        """Gets the author of this ItemLoan2.  # noqa: E501

        The author of the loaned item. Output parameter.  # noqa: E501

        :return: The author of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ItemLoan2.

        The author of the loaned item. Output parameter.  # noqa: E501

        :param author: The author of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def description(self):
        """Gets the description of this ItemLoan2.  # noqa: E501

        The description of the loaned item when dealing with multi volume/issue item. Output parameter.  # noqa: E501

        :return: The description of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemLoan2.

        The description of the loaned item when dealing with multi volume/issue item. Output parameter.  # noqa: E501

        :param description: The description of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def publication_year(self):
        """Gets the publication_year of this ItemLoan2.  # noqa: E501


        :return: The publication_year of this ItemLoan2.  # noqa: E501
        :rtype: NumericString
        """
        return self._publication_year

    @publication_year.setter
    def publication_year(self, publication_year):
        """Sets the publication_year of this ItemLoan2.


        :param publication_year: The publication_year of this ItemLoan2.  # noqa: E501
        :type: NumericString
        """

        self._publication_year = publication_year

    @property
    def location_code(self):
        """Gets the location_code of this ItemLoan2.  # noqa: E501

        The current loacation of the item. Output parameter.  # noqa: E501

        :return: The location_code of this ItemLoan2.  # noqa: E501
        :rtype: object
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this ItemLoan2.

        The current loacation of the item. Output parameter.  # noqa: E501

        :param location_code: The location_code of this ItemLoan2.  # noqa: E501
        :type: object
        """

        self._location_code = location_code

    @property
    def item_policy(self):
        """Gets the item_policy of this ItemLoan2.  # noqa: E501

        The item's related policy. Output parameter. Possible codes are listed in 'Item Policy' code-table.  # noqa: E501

        :return: The item_policy of this ItemLoan2.  # noqa: E501
        :rtype: object
        """
        return self._item_policy

    @item_policy.setter
    def item_policy(self, item_policy):
        """Sets the item_policy of this ItemLoan2.

        The item's related policy. Output parameter. Possible codes are listed in 'Item Policy' code-table.  # noqa: E501

        :param item_policy: The item_policy of this ItemLoan2.  # noqa: E501
        :type: object
        """

        self._item_policy = item_policy

    @property
    def call_number(self):
        """Gets the call_number of this ItemLoan2.  # noqa: E501

        The call number of the loaned item. Output parameter.  # noqa: E501

        :return: The call_number of this ItemLoan2.  # noqa: E501
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """Sets the call_number of this ItemLoan2.

        The call number of the loaned item. Output parameter.  # noqa: E501

        :param call_number: The call_number of this ItemLoan2.  # noqa: E501
        :type: str
        """

        self._call_number = call_number

    @property
    def loan_fine(self):
        """Gets the loan_fine of this ItemLoan2.  # noqa: E501

        The amount that would be charged if the item would have been returned now (for example, if the loan is overdue). Output parameter.  # noqa: E501

        :return: The loan_fine of this ItemLoan2.  # noqa: E501
        :rtype: float
        """
        return self._loan_fine

    @loan_fine.setter
    def loan_fine(self, loan_fine):
        """Sets the loan_fine of this ItemLoan2.

        The amount that would be charged if the item would have been returned now (for example, if the loan is overdue). Output parameter.  # noqa: E501

        :param loan_fine: The loan_fine of this ItemLoan2.  # noqa: E501
        :type: float
        """

        self._loan_fine = loan_fine

    @property
    def renewable(self):
        """Gets the renewable of this ItemLoan2.  # noqa: E501

        Flag that indicates if the loan is renewable.  # noqa: E501

        :return: The renewable of this ItemLoan2.  # noqa: E501
        :rtype: bool
        """
        return self._renewable

    @renewable.setter
    def renewable(self, renewable):
        """Sets the renewable of this ItemLoan2.

        Flag that indicates if the loan is renewable.  # noqa: E501

        :param renewable: The renewable of this ItemLoan2.  # noqa: E501
        :type: bool
        """

        self._renewable = renewable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemLoan2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemLoan2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
