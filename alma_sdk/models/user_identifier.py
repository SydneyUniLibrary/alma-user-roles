# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_type': 'str',
        'id_type': 'object',
        'value': 'str',
        'note': 'str',
        'status': 'str'
    }

    attribute_map = {
        'segment_type': 'segment_type',
        'id_type': 'id_type',
        'value': 'value',
        'note': 'note',
        'status': 'status'
    }

    def __init__(self, segment_type=None, id_type=None, value=None, note=None, status=None):  # noqa: E501
        """UserIdentifier - a model defined in Swagger"""  # noqa: E501
        self._segment_type = None
        self._id_type = None
        self._value = None
        self._note = None
        self._status = None
        self.discriminator = None
        if segment_type is not None:
            self.segment_type = segment_type
        self.id_type = id_type
        self.value = value
        if note is not None:
            self.note = note
        if status is not None:
            self.status = status

    @property
    def segment_type(self):
        """Gets the segment_type of this UserIdentifier.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this UserIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this UserIdentifier.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this UserIdentifier.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def id_type(self):
        """Gets the id_type of this UserIdentifier.  # noqa: E501

        The identifier type. Possible codes are listed in 'User Identifier Type' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Mandatory.  # noqa: E501

        :return: The id_type of this UserIdentifier.  # noqa: E501
        :rtype: object
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this UserIdentifier.

        The identifier type. Possible codes are listed in 'User Identifier Type' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Mandatory.  # noqa: E501

        :param id_type: The id_type of this UserIdentifier.  # noqa: E501
        :type: object
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")  # noqa: E501

        self._id_type = id_type

    @property
    def value(self):
        """Gets the value of this UserIdentifier.  # noqa: E501

        The identifier value. Mandatory. Note that additional identifiers are case sensitive.  # noqa: E501

        :return: The value of this UserIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserIdentifier.

        The identifier value. Mandatory. Note that additional identifiers are case sensitive.  # noqa: E501

        :param value: The value of this UserIdentifier.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def note(self):
        """Gets the note of this UserIdentifier.  # noqa: E501

        identifier's note.  # noqa: E501

        :return: The note of this UserIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserIdentifier.

        identifier's note.  # noqa: E501

        :param note: The note of this UserIdentifier.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """Gets the status of this UserIdentifier.  # noqa: E501

        identifier's status.  # noqa: E501

        :return: The status of this UserIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserIdentifier.

        identifier's status.  # noqa: E501

        :param status: The status of this UserIdentifier.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
