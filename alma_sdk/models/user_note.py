# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_type': 'str',
        'note_type': 'object',
        'note_text': 'str',
        'user_viewable': 'bool',
        'created_by': 'str',
        'created_date': 'date'
    }

    attribute_map = {
        'segment_type': 'segment_type',
        'note_type': 'note_type',
        'note_text': 'note_text',
        'user_viewable': 'user_viewable',
        'created_by': 'created_by',
        'created_date': 'created_date'
    }

    def __init__(self, segment_type=None, note_type=None, note_text=None, user_viewable=None, created_by=None, created_date=None):  # noqa: E501
        """UserNote - a model defined in Swagger"""  # noqa: E501
        self._segment_type = None
        self._note_type = None
        self._note_text = None
        self._user_viewable = None
        self._created_by = None
        self._created_date = None
        self.discriminator = None
        if segment_type is not None:
            self.segment_type = segment_type
        self.note_type = note_type
        if note_text is not None:
            self.note_text = note_text
        self.user_viewable = user_viewable
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date

    @property
    def segment_type(self):
        """Gets the segment_type of this UserNote.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this UserNote.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this UserNote.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this UserNote.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def note_type(self):
        """Gets the note_type of this UserNote.  # noqa: E501

        The note's type. Possible codes are listed in the 'Note Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Mandatory.  # noqa: E501

        :return: The note_type of this UserNote.  # noqa: E501
        :rtype: object
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this UserNote.

        The note's type. Possible codes are listed in the 'Note Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Mandatory.  # noqa: E501

        :param note_type: The note_type of this UserNote.  # noqa: E501
        :type: object
        """
        if note_type is None:
            raise ValueError("Invalid value for `note_type`, must not be `None`")  # noqa: E501

        self._note_type = note_type

    @property
    def note_text(self):
        """Gets the note_text of this UserNote.  # noqa: E501

        The note's text. Mandatory.  # noqa: E501

        :return: The note_text of this UserNote.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this UserNote.

        The note's text. Mandatory.  # noqa: E501

        :param note_text: The note_text of this UserNote.  # noqa: E501
        :type: str
        """

        self._note_text = note_text

    @property
    def user_viewable(self):
        """Gets the user_viewable of this UserNote.  # noqa: E501

        Indication whether the user is able to view the note. Default is false.  # noqa: E501

        :return: The user_viewable of this UserNote.  # noqa: E501
        :rtype: bool
        """
        return self._user_viewable

    @user_viewable.setter
    def user_viewable(self, user_viewable):
        """Sets the user_viewable of this UserNote.

        Indication whether the user is able to view the note. Default is false.  # noqa: E501

        :param user_viewable: The user_viewable of this UserNote.  # noqa: E501
        :type: bool
        """
        if user_viewable is None:
            raise ValueError("Invalid value for `user_viewable`, must not be `None`")  # noqa: E501

        self._user_viewable = user_viewable

    @property
    def created_by(self):
        """Gets the created_by of this UserNote.  # noqa: E501

        Creator of the note.  # noqa: E501

        :return: The created_by of this UserNote.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserNote.

        Creator of the note.  # noqa: E501

        :param created_by: The created_by of this UserNote.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this UserNote.  # noqa: E501

        Creation date of the note.  # noqa: E501

        :return: The created_date of this UserNote.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UserNote.

        Creation date of the note.  # noqa: E501

        :param created_date: The created_date of this UserNote.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
