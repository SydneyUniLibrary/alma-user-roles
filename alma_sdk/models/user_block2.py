# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserBlock2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segment_type': 'str',
        'block_type': 'object',
        'block_description': 'object',
        'block_status': 'str',
        'block_note': 'str',
        'created_by': 'str',
        'created_date': 'date',
        'expiry_date': 'date',
        'item_loan_id': 'str'
    }

    attribute_map = {
        'segment_type': 'segment_type',
        'block_type': 'block_type',
        'block_description': 'block_description',
        'block_status': 'block_status',
        'block_note': 'block_note',
        'created_by': 'created_by',
        'created_date': 'created_date',
        'expiry_date': 'expiry_date',
        'item_loan_id': 'item_loan_id'
    }

    def __init__(self, segment_type=None, block_type=None, block_description=None, block_status=None, block_note=None, created_by=None, created_date=None, expiry_date=None, item_loan_id=None):  # noqa: E501
        """UserBlock2 - a model defined in Swagger"""  # noqa: E501
        self._segment_type = None
        self._block_type = None
        self._block_description = None
        self._block_status = None
        self._block_note = None
        self._created_by = None
        self._created_date = None
        self._expiry_date = None
        self._item_loan_id = None
        self.discriminator = None
        if segment_type is not None:
            self.segment_type = segment_type
        if block_type is not None:
            self.block_type = block_type
        self.block_description = block_description
        if block_status is not None:
            self.block_status = block_status
        if block_note is not None:
            self.block_note = block_note
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if item_loan_id is not None:
            self.item_loan_id = item_loan_id

    @property
    def segment_type(self):
        """Gets the segment_type of this UserBlock2.  # noqa: E501

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :return: The segment_type of this UserBlock2.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this UserBlock2.

        The type of the segment (Internal or External). Relevant only for User API (and not for SIS). For internal users, all the segments are considered internal. External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.  # noqa: E501

        :param segment_type: The segment_type of this UserBlock2.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def block_type(self):
        """Gets the block_type of this UserBlock2.  # noqa: E501

        The block type. Possible codes are listed in the 'User Block Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is 'GENERAL'.  # noqa: E501

        :return: The block_type of this UserBlock2.  # noqa: E501
        :rtype: object
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type):
        """Sets the block_type of this UserBlock2.

        The block type. Possible codes are listed in the 'User Block Types' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is 'GENERAL'.  # noqa: E501

        :param block_type: The block_type of this UserBlock2.  # noqa: E501
        :type: object
        """

        self._block_type = block_type

    @property
    def block_description(self):
        """Gets the block_description of this UserBlock2.  # noqa: E501

        The block's description. Mandatory. Possible codes are listed in the 'User Block Description' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The block_description of this UserBlock2.  # noqa: E501
        :rtype: object
        """
        return self._block_description

    @block_description.setter
    def block_description(self, block_description):
        """Sets the block_description of this UserBlock2.

        The block's description. Mandatory. Possible codes are listed in the 'User Block Description' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param block_description: The block_description of this UserBlock2.  # noqa: E501
        :type: object
        """
        if block_description is None:
            raise ValueError("Invalid value for `block_description`, must not be `None`")  # noqa: E501

        self._block_description = block_description

    @property
    def block_status(self):
        """Gets the block_status of this UserBlock2.  # noqa: E501

        The block's status. Possible values: Active, Inactive. Default is Active.  # noqa: E501

        :return: The block_status of this UserBlock2.  # noqa: E501
        :rtype: str
        """
        return self._block_status

    @block_status.setter
    def block_status(self, block_status):
        """Sets the block_status of this UserBlock2.

        The block's status. Possible values: Active, Inactive. Default is Active.  # noqa: E501

        :param block_status: The block_status of this UserBlock2.  # noqa: E501
        :type: str
        """

        self._block_status = block_status

    @property
    def block_note(self):
        """Gets the block_note of this UserBlock2.  # noqa: E501

        The block's related note.  # noqa: E501

        :return: The block_note of this UserBlock2.  # noqa: E501
        :rtype: str
        """
        return self._block_note

    @block_note.setter
    def block_note(self, block_note):
        """Sets the block_note of this UserBlock2.

        The block's related note.  # noqa: E501

        :param block_note: The block_note of this UserBlock2.  # noqa: E501
        :type: str
        """

        self._block_note = block_note

    @property
    def created_by(self):
        """Gets the created_by of this UserBlock2.  # noqa: E501

        Creator of the block  # noqa: E501

        :return: The created_by of this UserBlock2.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserBlock2.

        Creator of the block  # noqa: E501

        :param created_by: The created_by of this UserBlock2.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this UserBlock2.  # noqa: E501

        Creation date of the block  # noqa: E501

        :return: The created_date of this UserBlock2.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UserBlock2.

        Creation date of the block  # noqa: E501

        :param created_date: The created_date of this UserBlock2.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this UserBlock2.  # noqa: E501

        Expiration date of the block  # noqa: E501

        :return: The expiry_date of this UserBlock2.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this UserBlock2.

        Expiration date of the block  # noqa: E501

        :param expiry_date: The expiry_date of this UserBlock2.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def item_loan_id(self):
        """Gets the item_loan_id of this UserBlock2.  # noqa: E501

        Internal identifier of the loan which generated this block.  # noqa: E501

        :return: The item_loan_id of this UserBlock2.  # noqa: E501
        :rtype: str
        """
        return self._item_loan_id

    @item_loan_id.setter
    def item_loan_id(self, item_loan_id):
        """Sets the item_loan_id of this UserBlock2.

        Internal identifier of the loan which generated this block.  # noqa: E501

        :param item_loan_id: The item_loan_id of this UserBlock2.  # noqa: E501
        :type: str
        """

        self._item_loan_id = item_loan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserBlock2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBlock2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
