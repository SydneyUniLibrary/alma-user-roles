# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Transaction2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'type': 'object',
        'amount': 'float',
        'vat_amount': 'float',
        'reason': 'str',
        'comment': 'str',
        'created_by': 'str',
        'transaction_time': 'date',
        'received_by': 'object',
        'payment_method': 'object'
    }

    attribute_map = {
        'transaction_id': 'transaction_id',
        'type': 'type',
        'amount': 'amount',
        'vat_amount': 'vat_amount',
        'reason': 'reason',
        'comment': 'comment',
        'created_by': 'created_by',
        'transaction_time': 'transaction_time',
        'received_by': 'received_by',
        'payment_method': 'payment_method'
    }

    def __init__(self, transaction_id=None, type=None, amount=None, vat_amount=None, reason=None, comment=None, created_by=None, transaction_time=None, received_by=None, payment_method=None):  # noqa: E501
        """Transaction2 - a model defined in Swagger"""  # noqa: E501
        self._transaction_id = None
        self._type = None
        self._amount = None
        self._vat_amount = None
        self._reason = None
        self._comment = None
        self._created_by = None
        self._transaction_time = None
        self._received_by = None
        self._payment_method = None
        self.discriminator = None
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if type is not None:
            self.type = type
        if amount is not None:
            self.amount = amount
        if vat_amount is not None:
            self.vat_amount = vat_amount
        if reason is not None:
            self.reason = reason
        if comment is not None:
            self.comment = comment
        if created_by is not None:
            self.created_by = created_by
        if transaction_time is not None:
            self.transaction_time = transaction_time
        if received_by is not None:
            self.received_by = received_by
        if payment_method is not None:
            self.payment_method = payment_method

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Transaction2.  # noqa: E501

        Identifier of the transaction in Alma.  # noqa: E501

        :return: The transaction_id of this Transaction2.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Transaction2.

        Identifier of the transaction in Alma.  # noqa: E501

        :param transaction_id: The transaction_id of this Transaction2.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this Transaction2.  # noqa: E501

        The fine / fee transaction type.  # noqa: E501

        :return: The type of this Transaction2.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction2.

        The fine / fee transaction type.  # noqa: E501

        :param type: The type of this Transaction2.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this Transaction2.  # noqa: E501

        The transaction amount.  # noqa: E501

        :return: The amount of this Transaction2.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction2.

        The transaction amount.  # noqa: E501

        :param amount: The amount of this Transaction2.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def vat_amount(self):
        """Gets the vat_amount of this Transaction2.  # noqa: E501

        The transaction vat amount.  # noqa: E501

        :return: The vat_amount of this Transaction2.  # noqa: E501
        :rtype: float
        """
        return self._vat_amount

    @vat_amount.setter
    def vat_amount(self, vat_amount):
        """Sets the vat_amount of this Transaction2.

        The transaction vat amount.  # noqa: E501

        :param vat_amount: The vat_amount of this Transaction2.  # noqa: E501
        :type: float
        """

        self._vat_amount = vat_amount

    @property
    def reason(self):
        """Gets the reason of this Transaction2.  # noqa: E501

        The reason for the transaction.  # noqa: E501

        :return: The reason of this Transaction2.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Transaction2.

        The reason for the transaction.  # noqa: E501

        :param reason: The reason of this Transaction2.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def comment(self):
        """Gets the comment of this Transaction2.  # noqa: E501

        A note attached to the transaction.  # noqa: E501

        :return: The comment of this Transaction2.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Transaction2.

        A note attached to the transaction.  # noqa: E501

        :param comment: The comment of this Transaction2.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this Transaction2.  # noqa: E501

        The operator who last updated the transaction.  # noqa: E501

        :return: The created_by of this Transaction2.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Transaction2.

        The operator who last updated the transaction.  # noqa: E501

        :param created_by: The created_by of this Transaction2.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def transaction_time(self):
        """Gets the transaction_time of this Transaction2.  # noqa: E501

        Date and time of the transaction.  # noqa: E501

        :return: The transaction_time of this Transaction2.  # noqa: E501
        :rtype: date
        """
        return self._transaction_time

    @transaction_time.setter
    def transaction_time(self, transaction_time):
        """Sets the transaction_time of this Transaction2.

        Date and time of the transaction.  # noqa: E501

        :param transaction_time: The transaction_time of this Transaction2.  # noqa: E501
        :type: date
        """

        self._transaction_time = transaction_time

    @property
    def received_by(self):
        """Gets the received_by of this Transaction2.  # noqa: E501

        The circulation desk in which the transaction was received. Output parameter. If no circulation desk indicated in this field, it is indicated as Not at desk.  # noqa: E501

        :return: The received_by of this Transaction2.  # noqa: E501
        :rtype: object
        """
        return self._received_by

    @received_by.setter
    def received_by(self, received_by):
        """Sets the received_by of this Transaction2.

        The circulation desk in which the transaction was received. Output parameter. If no circulation desk indicated in this field, it is indicated as Not at desk.  # noqa: E501

        :param received_by: The received_by of this Transaction2.  # noqa: E501
        :type: object
        """

        self._received_by = received_by

    @property
    def payment_method(self):
        """Gets the payment_method of this Transaction2.  # noqa: E501

        The payment method of the transaction. Output parameter.  # noqa: E501

        :return: The payment_method of this Transaction2.  # noqa: E501
        :rtype: object
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Transaction2.

        The payment method of the transaction. Output parameter.  # noqa: E501

        :param payment_method: The payment_method of this Transaction2.  # noqa: E501
        :type: object
        """

        self._payment_method = payment_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
