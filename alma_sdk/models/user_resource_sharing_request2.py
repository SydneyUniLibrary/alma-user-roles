# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from alma_sdk.models.additional_barcodes import AdditionalBarcodes  # noqa: F401,E501
from alma_sdk.models.amount2 import Amount2  # noqa: F401,E501
from alma_sdk.models.rs_notes import RsNotes  # noqa: F401,E501


class UserResourceSharingRequest2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'external_id': 'str',
        'created_date': 'date',
        'last_modified_date': 'date',
        'created_time': 'date',
        'last_modified_time': 'date',
        'status': 'object',
        'owner': 'str',
        'partner': 'object',
        'user_request': 'object',
        'requester': 'object',
        'requested_media': 'str',
        'format': 'object',
        'allow_other_formats': 'bool',
        'supplied_format': 'object',
        'preferred_send_method': 'object',
        'requested_language': 'object',
        'pickup_location': 'object',
        'reading_room': 'object',
        'last_interest_date': 'date',
        'use_alternative_address': 'bool',
        'text_email': 'str',
        'text_postal_1': 'str',
        'text_postal_2': 'str',
        'text_postal_3': 'str',
        'text_postal_4': 'str',
        'shipping_cost': 'Amount2',
        'fund': 'object',
        'copyright_status': 'object',
        'agree_to_copyright_terms': 'bool',
        'need_patron_info': 'bool',
        'willing_to_pay': 'bool',
        'citation_type': 'object',
        'note': 'str',
        'maximum_fee': 'float',
        'has_active_notes': 'bool',
        'rs_note': 'RsNotes',
        'printed': 'bool',
        'reported': 'bool',
        'level_of_service': 'object',
        'mms_id': 'str',
        'barcode': 'str',
        'additional_barcode': 'AdditionalBarcodes',
        'title': 'str',
        'issn': 'str',
        'isbn': 'str',
        'author': 'str',
        'author_initials': 'str',
        'year': 'str',
        'publisher': 'str',
        'place_of_publication': 'str',
        'edition': 'str',
        'specific_edition': 'bool',
        'volume': 'str',
        'journal_title': 'str',
        'issue': 'str',
        'chapter': 'str',
        'chapter_title': 'str',
        'chapter_author': 'str',
        'editor': 'str',
        'pages': 'str',
        'start_page': 'str',
        'end_page': 'str',
        'part': 'str',
        'source': 'str',
        'series_title_number': 'str',
        'doi': 'str',
        'pmid': 'str',
        'additional_person_name': 'str',
        'call_number': 'str',
        'bib_note': 'str',
        'lcc_number': 'str',
        'oclc_number': 'str'
    }

    attribute_map = {
        'request_id': 'request_id',
        'external_id': 'external_id',
        'created_date': 'created_date',
        'last_modified_date': 'last_modified_date',
        'created_time': 'created_time',
        'last_modified_time': 'last_modified_time',
        'status': 'status',
        'owner': 'owner',
        'partner': 'partner',
        'user_request': 'user_request',
        'requester': 'requester',
        'requested_media': 'requested_media',
        'format': 'format',
        'allow_other_formats': 'allow_other_formats',
        'supplied_format': 'supplied_format',
        'preferred_send_method': 'preferred_send_method',
        'requested_language': 'requested_language',
        'pickup_location': 'pickup_location',
        'reading_room': 'reading_room',
        'last_interest_date': 'last_interest_date',
        'use_alternative_address': 'use_alternative_address',
        'text_email': 'text_email',
        'text_postal_1': 'text_postal_1',
        'text_postal_2': 'text_postal_2',
        'text_postal_3': 'text_postal_3',
        'text_postal_4': 'text_postal_4',
        'shipping_cost': 'shipping_cost',
        'fund': 'fund',
        'copyright_status': 'copyright_status',
        'agree_to_copyright_terms': 'agree_to_copyright_terms',
        'need_patron_info': 'need_patron_info',
        'willing_to_pay': 'willing_to_pay',
        'citation_type': 'citation_type',
        'note': 'note',
        'maximum_fee': 'maximum_fee',
        'has_active_notes': 'has_active_notes',
        'rs_note': 'rs_note',
        'printed': 'printed',
        'reported': 'reported',
        'level_of_service': 'level_of_service',
        'mms_id': 'mms_id',
        'barcode': 'barcode',
        'additional_barcode': 'additional_barcode',
        'title': 'title',
        'issn': 'issn',
        'isbn': 'isbn',
        'author': 'author',
        'author_initials': 'author_initials',
        'year': 'year',
        'publisher': 'publisher',
        'place_of_publication': 'place_of_publication',
        'edition': 'edition',
        'specific_edition': 'specific_edition',
        'volume': 'volume',
        'journal_title': 'journal_title',
        'issue': 'issue',
        'chapter': 'chapter',
        'chapter_title': 'chapter_title',
        'chapter_author': 'chapter_author',
        'editor': 'editor',
        'pages': 'pages',
        'start_page': 'start_page',
        'end_page': 'end_page',
        'part': 'part',
        'source': 'source',
        'series_title_number': 'series_title_number',
        'doi': 'doi',
        'pmid': 'pmid',
        'additional_person_name': 'additional_person_name',
        'call_number': 'call_number',
        'bib_note': 'bib_note',
        'lcc_number': 'lcc_number',
        'oclc_number': 'oclc_number'
    }

    def __init__(self, request_id=None, external_id=None, created_date=None, last_modified_date=None, created_time=None, last_modified_time=None, status=None, owner=None, partner=None, user_request=None, requester=None, requested_media=None, format=None, allow_other_formats=None, supplied_format=None, preferred_send_method=None, requested_language=None, pickup_location=None, reading_room=None, last_interest_date=None, use_alternative_address=None, text_email=None, text_postal_1=None, text_postal_2=None, text_postal_3=None, text_postal_4=None, shipping_cost=None, fund=None, copyright_status=None, agree_to_copyright_terms=None, need_patron_info=None, willing_to_pay=None, citation_type=None, note=None, maximum_fee=None, has_active_notes=None, rs_note=None, printed=None, reported=None, level_of_service=None, mms_id=None, barcode=None, additional_barcode=None, title=None, issn=None, isbn=None, author=None, author_initials=None, year=None, publisher=None, place_of_publication=None, edition=None, specific_edition=None, volume=None, journal_title=None, issue=None, chapter=None, chapter_title=None, chapter_author=None, editor=None, pages=None, start_page=None, end_page=None, part=None, source=None, series_title_number=None, doi=None, pmid=None, additional_person_name=None, call_number=None, bib_note=None, lcc_number=None, oclc_number=None):  # noqa: E501
        """UserResourceSharingRequest2 - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._external_id = None
        self._created_date = None
        self._last_modified_date = None
        self._created_time = None
        self._last_modified_time = None
        self._status = None
        self._owner = None
        self._partner = None
        self._user_request = None
        self._requester = None
        self._requested_media = None
        self._format = None
        self._allow_other_formats = None
        self._supplied_format = None
        self._preferred_send_method = None
        self._requested_language = None
        self._pickup_location = None
        self._reading_room = None
        self._last_interest_date = None
        self._use_alternative_address = None
        self._text_email = None
        self._text_postal_1 = None
        self._text_postal_2 = None
        self._text_postal_3 = None
        self._text_postal_4 = None
        self._shipping_cost = None
        self._fund = None
        self._copyright_status = None
        self._agree_to_copyright_terms = None
        self._need_patron_info = None
        self._willing_to_pay = None
        self._citation_type = None
        self._note = None
        self._maximum_fee = None
        self._has_active_notes = None
        self._rs_note = None
        self._printed = None
        self._reported = None
        self._level_of_service = None
        self._mms_id = None
        self._barcode = None
        self._additional_barcode = None
        self._title = None
        self._issn = None
        self._isbn = None
        self._author = None
        self._author_initials = None
        self._year = None
        self._publisher = None
        self._place_of_publication = None
        self._edition = None
        self._specific_edition = None
        self._volume = None
        self._journal_title = None
        self._issue = None
        self._chapter = None
        self._chapter_title = None
        self._chapter_author = None
        self._editor = None
        self._pages = None
        self._start_page = None
        self._end_page = None
        self._part = None
        self._source = None
        self._series_title_number = None
        self._doi = None
        self._pmid = None
        self._additional_person_name = None
        self._call_number = None
        self._bib_note = None
        self._lcc_number = None
        self._oclc_number = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if external_id is not None:
            self.external_id = external_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if status is not None:
            self.status = status
        if owner is not None:
            self.owner = owner
        if partner is not None:
            self.partner = partner
        if user_request is not None:
            self.user_request = user_request
        if requester is not None:
            self.requester = requester
        if requested_media is not None:
            self.requested_media = requested_media
        if format is not None:
            self.format = format
        if allow_other_formats is not None:
            self.allow_other_formats = allow_other_formats
        if supplied_format is not None:
            self.supplied_format = supplied_format
        if preferred_send_method is not None:
            self.preferred_send_method = preferred_send_method
        if requested_language is not None:
            self.requested_language = requested_language
        if pickup_location is not None:
            self.pickup_location = pickup_location
        if reading_room is not None:
            self.reading_room = reading_room
        if last_interest_date is not None:
            self.last_interest_date = last_interest_date
        if use_alternative_address is not None:
            self.use_alternative_address = use_alternative_address
        if text_email is not None:
            self.text_email = text_email
        if text_postal_1 is not None:
            self.text_postal_1 = text_postal_1
        if text_postal_2 is not None:
            self.text_postal_2 = text_postal_2
        if text_postal_3 is not None:
            self.text_postal_3 = text_postal_3
        if text_postal_4 is not None:
            self.text_postal_4 = text_postal_4
        if shipping_cost is not None:
            self.shipping_cost = shipping_cost
        if fund is not None:
            self.fund = fund
        if copyright_status is not None:
            self.copyright_status = copyright_status
        if agree_to_copyright_terms is not None:
            self.agree_to_copyright_terms = agree_to_copyright_terms
        if need_patron_info is not None:
            self.need_patron_info = need_patron_info
        if willing_to_pay is not None:
            self.willing_to_pay = willing_to_pay
        if citation_type is not None:
            self.citation_type = citation_type
        if note is not None:
            self.note = note
        if maximum_fee is not None:
            self.maximum_fee = maximum_fee
        if has_active_notes is not None:
            self.has_active_notes = has_active_notes
        if rs_note is not None:
            self.rs_note = rs_note
        if printed is not None:
            self.printed = printed
        if reported is not None:
            self.reported = reported
        if level_of_service is not None:
            self.level_of_service = level_of_service
        if mms_id is not None:
            self.mms_id = mms_id
        if barcode is not None:
            self.barcode = barcode
        if additional_barcode is not None:
            self.additional_barcode = additional_barcode
        if title is not None:
            self.title = title
        if issn is not None:
            self.issn = issn
        if isbn is not None:
            self.isbn = isbn
        if author is not None:
            self.author = author
        if author_initials is not None:
            self.author_initials = author_initials
        if year is not None:
            self.year = year
        if publisher is not None:
            self.publisher = publisher
        if place_of_publication is not None:
            self.place_of_publication = place_of_publication
        if edition is not None:
            self.edition = edition
        if specific_edition is not None:
            self.specific_edition = specific_edition
        if volume is not None:
            self.volume = volume
        if journal_title is not None:
            self.journal_title = journal_title
        if issue is not None:
            self.issue = issue
        if chapter is not None:
            self.chapter = chapter
        if chapter_title is not None:
            self.chapter_title = chapter_title
        if chapter_author is not None:
            self.chapter_author = chapter_author
        if editor is not None:
            self.editor = editor
        if pages is not None:
            self.pages = pages
        if start_page is not None:
            self.start_page = start_page
        if end_page is not None:
            self.end_page = end_page
        if part is not None:
            self.part = part
        if source is not None:
            self.source = source
        if series_title_number is not None:
            self.series_title_number = series_title_number
        if doi is not None:
            self.doi = doi
        if pmid is not None:
            self.pmid = pmid
        if additional_person_name is not None:
            self.additional_person_name = additional_person_name
        if call_number is not None:
            self.call_number = call_number
        if bib_note is not None:
            self.bib_note = bib_note
        if lcc_number is not None:
            self.lcc_number = lcc_number
        if oclc_number is not None:
            self.oclc_number = oclc_number

    @property
    def request_id(self):
        """Gets the request_id of this UserResourceSharingRequest2.  # noqa: E501

        Internal identifier of the resource sharing request in Alma, generated by Alma. Should be used in subsequent queries regarding the request.  # noqa: E501

        :return: The request_id of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this UserResourceSharingRequest2.

        Internal identifier of the resource sharing request in Alma, generated by Alma. Should be used in subsequent queries regarding the request.  # noqa: E501

        :param request_id: The request_id of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def external_id(self):
        """Gets the external_id of this UserResourceSharingRequest2.  # noqa: E501

        External identifier of the resource sharing request. Mandatory when creating a lending request.  # noqa: E501

        :return: The external_id of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UserResourceSharingRequest2.

        External identifier of the resource sharing request. Mandatory when creating a lending request.  # noqa: E501

        :param external_id: The external_id of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def created_date(self):
        """Gets the created_date of this UserResourceSharingRequest2.  # noqa: E501

        The request creation date.  # noqa: E501

        :return: The created_date of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UserResourceSharingRequest2.

        The request creation date.  # noqa: E501

        :param created_date: The created_date of this UserResourceSharingRequest2.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this UserResourceSharingRequest2.  # noqa: E501

        Date by which the last change to the request was made.  # noqa: E501

        :return: The last_modified_date of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: date
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this UserResourceSharingRequest2.

        Date by which the last change to the request was made.  # noqa: E501

        :param last_modified_date: The last_modified_date of this UserResourceSharingRequest2.  # noqa: E501
        :type: date
        """

        self._last_modified_date = last_modified_date

    @property
    def created_time(self):
        """Gets the created_time of this UserResourceSharingRequest2.  # noqa: E501

        The request creation time.  # noqa: E501

        :return: The created_time of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: date
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this UserResourceSharingRequest2.

        The request creation time.  # noqa: E501

        :param created_time: The created_time of this UserResourceSharingRequest2.  # noqa: E501
        :type: date
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this UserResourceSharingRequest2.  # noqa: E501

        Time by which the last change to the request was made.  # noqa: E501

        :return: The last_modified_time of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: date
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this UserResourceSharingRequest2.

        Time by which the last change to the request was made.  # noqa: E501

        :param last_modified_time: The last_modified_time of this UserResourceSharingRequest2.  # noqa: E501
        :type: date
        """

        self._last_modified_time = last_modified_time

    @property
    def status(self):
        """Gets the status of this UserResourceSharingRequest2.  # noqa: E501

        The resource sharing request status. Borrowing request: Possible codes are listed in MandatoryBorrowingWorkflowSteps or OptionalBorrowingWorkflowSteps [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Lending request: Possible codes are listed in MandatoryLendingWorkflowSteps or OptionalLendingWorkflowSteps [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The status of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserResourceSharingRequest2.

        The resource sharing request status. Borrowing request: Possible codes are listed in MandatoryBorrowingWorkflowSteps or OptionalBorrowingWorkflowSteps [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Lending request: Possible codes are listed in MandatoryLendingWorkflowSteps or OptionalLendingWorkflowSteps [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param status: The status of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def owner(self):
        """Gets the owner of this UserResourceSharingRequest2.  # noqa: E501

        The resource sharing library code. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed). Borrowing request: Optional. Used only when there are more than one resource sharing library defined for the user. Lending request: Mandatory.  # noqa: E501

        :return: The owner of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UserResourceSharingRequest2.

        The resource sharing library code. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed). Borrowing request: Optional. Used only when there are more than one resource sharing library defined for the user. Lending request: Mandatory.  # noqa: E501

        :param owner: The owner of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def partner(self):
        """Gets the partner of this UserResourceSharingRequest2.  # noqa: E501

        The code of the partner related to this request. See [Get partners API](https://developers.exlibrisgroup.com/alma/apis/partners/GET/gwPcGly021piAVNPLaef7suP1zfa6Lui/8883ef41-c3b8-4792-9ff8-cb6b729d6e07). Mandatory when creating a lending request.  # noqa: E501

        :return: The partner of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this UserResourceSharingRequest2.

        The code of the partner related to this request. See [Get partners API](https://developers.exlibrisgroup.com/alma/apis/partners/GET/gwPcGly021piAVNPLaef7suP1zfa6Lui/8883ef41-c3b8-4792-9ff8-cb6b729d6e07). Mandatory when creating a lending request.  # noqa: E501

        :param partner: The partner of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._partner = partner

    @property
    def user_request(self):
        """Gets the user_request of this UserResourceSharingRequest2.  # noqa: E501

        The request linked to the resource sharing request. Borrowing requests: this is the related user request. Lending requests: this is the move/digitization request (if exists). See [GET user's request API](https://developers.exlibrisgroup.com/alma/apis/users/GET/gwPcGly021r0XQMGAttqcPPFoLNxBoEZbQsUC/MWTX7aNWi0EYKYFUfYyI8KvpG73JPdiJpJhUA=/0aa8d36f-53d6-48ff-8996-485b90b103e4).  # noqa: E501

        :return: The user_request of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._user_request

    @user_request.setter
    def user_request(self, user_request):
        """Sets the user_request of this UserResourceSharingRequest2.

        The request linked to the resource sharing request. Borrowing requests: this is the related user request. Lending requests: this is the move/digitization request (if exists). See [GET user's request API](https://developers.exlibrisgroup.com/alma/apis/users/GET/gwPcGly021r0XQMGAttqcPPFoLNxBoEZbQsUC/MWTX7aNWi0EYKYFUfYyI8KvpG73JPdiJpJhUA=/0aa8d36f-53d6-48ff-8996-485b90b103e4).  # noqa: E501

        :param user_request: The user_request of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._user_request = user_request

    @property
    def requester(self):
        """Gets the requester of this UserResourceSharingRequest2.  # noqa: E501

        The primary identifier and full name of the requesting user. Relevant for borrowing requests. Not relevant for lending requests.  # noqa: E501

        :return: The requester of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this UserResourceSharingRequest2.

        The primary identifier and full name of the requesting user. Relevant for borrowing requests. Not relevant for lending requests.  # noqa: E501

        :param requester: The requester of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._requester = requester

    @property
    def requested_media(self):
        """Gets the requested_media of this UserResourceSharingRequest2.  # noqa: E501

        A description of the requested media. possible values are 1-7 (codes from request media code table), and the codes from 'AdditionalRequestedMedia' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). The valid values are according to the Requested media definition mapping table.  # noqa: E501

        :return: The requested_media of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._requested_media

    @requested_media.setter
    def requested_media(self, requested_media):
        """Sets the requested_media of this UserResourceSharingRequest2.

        A description of the requested media. possible values are 1-7 (codes from request media code table), and the codes from 'AdditionalRequestedMedia' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). The valid values are according to the Requested media definition mapping table.  # noqa: E501

        :param requested_media: The requested_media of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._requested_media = requested_media

    @property
    def format(self):
        """Gets the format of this UserResourceSharingRequest2.  # noqa: E501

        Format of the resource requested. For example, physical or digital. Mandatory. Possible codes are listed in RequestFormats [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The format of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this UserResourceSharingRequest2.

        Format of the resource requested. For example, physical or digital. Mandatory. Possible codes are listed in RequestFormats [code tables](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param format: The format of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._format = format

    @property
    def allow_other_formats(self):
        """Gets the allow_other_formats of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether other formats besides the value in format field are acceptable. Default is false.  # noqa: E501

        :return: The allow_other_formats of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._allow_other_formats

    @allow_other_formats.setter
    def allow_other_formats(self, allow_other_formats):
        """Sets the allow_other_formats of this UserResourceSharingRequest2.

        Indication whether other formats besides the value in format field are acceptable. Default is false.  # noqa: E501

        :param allow_other_formats: The allow_other_formats of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._allow_other_formats = allow_other_formats

    @property
    def supplied_format(self):
        """Gets the supplied_format of this UserResourceSharingRequest2.  # noqa: E501

        Format of the supplied item. For example, physical or digital. Possible codes are listed in RequestFormats [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Relevant only after the request is supplied.  # noqa: E501

        :return: The supplied_format of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._supplied_format

    @supplied_format.setter
    def supplied_format(self, supplied_format):
        """Sets the supplied_format of this UserResourceSharingRequest2.

        Format of the supplied item. For example, physical or digital. Possible codes are listed in RequestFormats [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Relevant only after the request is supplied.  # noqa: E501

        :param supplied_format: The supplied_format of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._supplied_format = supplied_format

    @property
    def preferred_send_method(self):
        """Gets the preferred_send_method of this UserResourceSharingRequest2.  # noqa: E501

        Preferred send method. Possible options are listed in 'ResourceSharingRequestSendMethod' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Currently not relevant for lending requests.  # noqa: E501

        :return: The preferred_send_method of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._preferred_send_method

    @preferred_send_method.setter
    def preferred_send_method(self, preferred_send_method):
        """Sets the preferred_send_method of this UserResourceSharingRequest2.

        Preferred send method. Possible options are listed in 'ResourceSharingRequestSendMethod' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Currently not relevant for lending requests.  # noqa: E501

        :param preferred_send_method: The preferred_send_method of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._preferred_send_method = preferred_send_method

    @property
    def requested_language(self):
        """Gets the requested_language of this UserResourceSharingRequest2.  # noqa: E501

        The requested language for the resource sharing request. Possible codes are the enabled fields in ResourceSharingLanguages [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is null.  # noqa: E501

        :return: The requested_language of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._requested_language

    @requested_language.setter
    def requested_language(self, requested_language):
        """Sets the requested_language of this UserResourceSharingRequest2.

        The requested language for the resource sharing request. Possible codes are the enabled fields in ResourceSharingLanguages [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is null.  # noqa: E501

        :param requested_language: The requested_language of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._requested_language = requested_language

    @property
    def pickup_location(self):
        """Gets the pickup_location of this UserResourceSharingRequest2.  # noqa: E501

        The pickup library code where the resource will be delivered. Relevant and mandatory for physical format delivery Borrowing request. Optional for digital format. Not relevant for lending requests.  # noqa: E501

        :return: The pickup_location of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._pickup_location

    @pickup_location.setter
    def pickup_location(self, pickup_location):
        """Sets the pickup_location of this UserResourceSharingRequest2.

        The pickup library code where the resource will be delivered. Relevant and mandatory for physical format delivery Borrowing request. Optional for digital format. Not relevant for lending requests.  # noqa: E501

        :param pickup_location: The pickup_location of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._pickup_location = pickup_location

    @property
    def reading_room(self):
        """Gets the reading_room of this UserResourceSharingRequest2.  # noqa: E501

        The code of the reading room where the item will be picked up. Mandatory when for_reading_room_only is true. Not relevant for lending requests.  # noqa: E501

        :return: The reading_room of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._reading_room

    @reading_room.setter
    def reading_room(self, reading_room):
        """Sets the reading_room of this UserResourceSharingRequest2.

        The code of the reading room where the item will be picked up. Mandatory when for_reading_room_only is true. Not relevant for lending requests.  # noqa: E501

        :param reading_room: The reading_room of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._reading_room = reading_room

    @property
    def last_interest_date(self):
        """Gets the last_interest_date of this UserResourceSharingRequest2.  # noqa: E501

        Last date the request is needed. Optional.  # noqa: E501

        :return: The last_interest_date of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: date
        """
        return self._last_interest_date

    @last_interest_date.setter
    def last_interest_date(self, last_interest_date):
        """Sets the last_interest_date of this UserResourceSharingRequest2.

        Last date the request is needed. Optional.  # noqa: E501

        :param last_interest_date: The last_interest_date of this UserResourceSharingRequest2.  # noqa: E501
        :type: date
        """

        self._last_interest_date = last_interest_date

    @property
    def use_alternative_address(self):
        """Gets the use_alternative_address of this UserResourceSharingRequest2.  # noqa: E501

        An indication of whether the delivery should be to an alternative address. Default is false. Not relevant for lending requests.  # noqa: E501

        :return: The use_alternative_address of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._use_alternative_address

    @use_alternative_address.setter
    def use_alternative_address(self, use_alternative_address):
        """Sets the use_alternative_address of this UserResourceSharingRequest2.

        An indication of whether the delivery should be to an alternative address. Default is false. Not relevant for lending requests.  # noqa: E501

        :param use_alternative_address: The use_alternative_address of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._use_alternative_address = use_alternative_address

    @property
    def text_email(self):
        """Gets the text_email of this UserResourceSharingRequest2.  # noqa: E501

        Borrowing request: In use with alternative_address only. In use when sending in digital format. Lending request: Requester's Email.  # noqa: E501

        :return: The text_email of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._text_email

    @text_email.setter
    def text_email(self, text_email):
        """Sets the text_email of this UserResourceSharingRequest2.

        Borrowing request: In use with alternative_address only. In use when sending in digital format. Lending request: Requester's Email.  # noqa: E501

        :param text_email: The text_email of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._text_email = text_email

    @property
    def text_postal_1(self):
        """Gets the text_postal_1 of this UserResourceSharingRequest2.  # noqa: E501

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :return: The text_postal_1 of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._text_postal_1

    @text_postal_1.setter
    def text_postal_1(self, text_postal_1):
        """Sets the text_postal_1 of this UserResourceSharingRequest2.

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :param text_postal_1: The text_postal_1 of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._text_postal_1 = text_postal_1

    @property
    def text_postal_2(self):
        """Gets the text_postal_2 of this UserResourceSharingRequest2.  # noqa: E501

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :return: The text_postal_2 of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._text_postal_2

    @text_postal_2.setter
    def text_postal_2(self, text_postal_2):
        """Sets the text_postal_2 of this UserResourceSharingRequest2.

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :param text_postal_2: The text_postal_2 of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._text_postal_2 = text_postal_2

    @property
    def text_postal_3(self):
        """Gets the text_postal_3 of this UserResourceSharingRequest2.  # noqa: E501

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :return: The text_postal_3 of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._text_postal_3

    @text_postal_3.setter
    def text_postal_3(self, text_postal_3):
        """Sets the text_postal_3 of this UserResourceSharingRequest2.

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :param text_postal_3: The text_postal_3 of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._text_postal_3 = text_postal_3

    @property
    def text_postal_4(self):
        """Gets the text_postal_4 of this UserResourceSharingRequest2.  # noqa: E501

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :return: The text_postal_4 of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._text_postal_4

    @text_postal_4.setter
    def text_postal_4(self, text_postal_4):
        """Sets the text_postal_4 of this UserResourceSharingRequest2.

        In use with alternative_address only. Not relevant for lending requests.  # noqa: E501

        :param text_postal_4: The text_postal_4 of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._text_postal_4 = text_postal_4

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this UserResourceSharingRequest2.  # noqa: E501


        :return: The shipping_cost of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: Amount2
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this UserResourceSharingRequest2.


        :param shipping_cost: The shipping_cost of this UserResourceSharingRequest2.  # noqa: E501
        :type: Amount2
        """

        self._shipping_cost = shipping_cost

    @property
    def fund(self):
        """Gets the fund of this UserResourceSharingRequest2.  # noqa: E501

        The code of the fund. Not relevant for lending requests.  # noqa: E501

        :return: The fund of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._fund

    @fund.setter
    def fund(self, fund):
        """Sets the fund of this UserResourceSharingRequest2.

        The code of the fund. Not relevant for lending requests.  # noqa: E501

        :param fund: The fund of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._fund = fund

    @property
    def copyright_status(self):
        """Gets the copyright_status of this UserResourceSharingRequest2.  # noqa: E501

        The copyright status of the request. Relevant if requested format is Digital, and 'rs_borrower_copyright_management' in customer parameters is true. Possible options are listed in 'ResourceSharingCopyrightsStatus' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API), default is generated per request. Relevant for GET, POST and PUT of borrowing requests, and GET of lending requests.  # noqa: E501

        :return: The copyright_status of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._copyright_status

    @copyright_status.setter
    def copyright_status(self, copyright_status):
        """Sets the copyright_status of this UserResourceSharingRequest2.

        The copyright status of the request. Relevant if requested format is Digital, and 'rs_borrower_copyright_management' in customer parameters is true. Possible options are listed in 'ResourceSharingCopyrightsStatus' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API), default is generated per request. Relevant for GET, POST and PUT of borrowing requests, and GET of lending requests.  # noqa: E501

        :param copyright_status: The copyright_status of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._copyright_status = copyright_status

    @property
    def agree_to_copyright_terms(self):
        """Gets the agree_to_copyright_terms of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether the requester has agreed to the copyright terms. Mandatory for borrowing requests. Currently not relevant for lending requests.  # noqa: E501

        :return: The agree_to_copyright_terms of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._agree_to_copyright_terms

    @agree_to_copyright_terms.setter
    def agree_to_copyright_terms(self, agree_to_copyright_terms):
        """Sets the agree_to_copyright_terms of this UserResourceSharingRequest2.

        Indication whether the requester has agreed to the copyright terms. Mandatory for borrowing requests. Currently not relevant for lending requests.  # noqa: E501

        :param agree_to_copyright_terms: The agree_to_copyright_terms of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._agree_to_copyright_terms = agree_to_copyright_terms

    @property
    def need_patron_info(self):
        """Gets the need_patron_info of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether patron information is needed. Not relevant for lending requests.  # noqa: E501

        :return: The need_patron_info of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._need_patron_info

    @need_patron_info.setter
    def need_patron_info(self, need_patron_info):
        """Sets the need_patron_info of this UserResourceSharingRequest2.

        Indication whether patron information is needed. Not relevant for lending requests.  # noqa: E501

        :param need_patron_info: The need_patron_info of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._need_patron_info = need_patron_info

    @property
    def willing_to_pay(self):
        """Gets the willing_to_pay of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether patron is willing to pay. Currently not relevant for lending requests.  # noqa: E501

        :return: The willing_to_pay of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._willing_to_pay

    @willing_to_pay.setter
    def willing_to_pay(self, willing_to_pay):
        """Sets the willing_to_pay of this UserResourceSharingRequest2.

        Indication whether patron is willing to pay. Currently not relevant for lending requests.  # noqa: E501

        :param willing_to_pay: The willing_to_pay of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._willing_to_pay = willing_to_pay

    @property
    def citation_type(self):
        """Gets the citation_type of this UserResourceSharingRequest2.  # noqa: E501

        Type of the requested resource. For example, book or article. Mandatory for borrowing requests. Mandatory when creating a lending request unless mms_id is supplied. For borrowing requests, possible codes are listed in 'PhysicalReadingListCitationTypes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): BK / CR. For lending requests, possible codes are listed in PR_CitationType [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): BOOK / JOURNAL.  # noqa: E501

        :return: The citation_type of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._citation_type

    @citation_type.setter
    def citation_type(self, citation_type):
        """Sets the citation_type of this UserResourceSharingRequest2.

        Type of the requested resource. For example, book or article. Mandatory for borrowing requests. Mandatory when creating a lending request unless mms_id is supplied. For borrowing requests, possible codes are listed in 'PhysicalReadingListCitationTypes' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): BK / CR. For lending requests, possible codes are listed in PR_CitationType [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): BOOK / JOURNAL.  # noqa: E501

        :param citation_type: The citation_type of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._citation_type = citation_type

    @property
    def note(self):
        """Gets the note of this UserResourceSharingRequest2.  # noqa: E501

        General note.  # noqa: E501

        :return: The note of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserResourceSharingRequest2.

        General note.  # noqa: E501

        :param note: The note of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def maximum_fee(self):
        """Gets the maximum_fee of this UserResourceSharingRequest2.  # noqa: E501

        Maximum fee the user is willing to pay for the request. Currently not relevant for lending requests.  # noqa: E501

        :return: The maximum_fee of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: float
        """
        return self._maximum_fee

    @maximum_fee.setter
    def maximum_fee(self, maximum_fee):
        """Sets the maximum_fee of this UserResourceSharingRequest2.

        Maximum fee the user is willing to pay for the request. Currently not relevant for lending requests.  # noqa: E501

        :param maximum_fee: The maximum_fee of this UserResourceSharingRequest2.  # noqa: E501
        :type: float
        """

        self._maximum_fee = maximum_fee

    @property
    def has_active_notes(self):
        """Gets the has_active_notes of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether the request has active notes. Output parameter.  # noqa: E501

        :return: The has_active_notes of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._has_active_notes

    @has_active_notes.setter
    def has_active_notes(self, has_active_notes):
        """Sets the has_active_notes of this UserResourceSharingRequest2.

        Indication whether the request has active notes. Output parameter.  # noqa: E501

        :param has_active_notes: The has_active_notes of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._has_active_notes = has_active_notes

    @property
    def rs_note(self):
        """Gets the rs_note of this UserResourceSharingRequest2.  # noqa: E501


        :return: The rs_note of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: RsNotes
        """
        return self._rs_note

    @rs_note.setter
    def rs_note(self, rs_note):
        """Sets the rs_note of this UserResourceSharingRequest2.


        :param rs_note: The rs_note of this UserResourceSharingRequest2.  # noqa: E501
        :type: RsNotes
        """

        self._rs_note = rs_note

    @property
    def printed(self):
        """Gets the printed of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether the request is printed. Output parameter. Relevant for lending requests.  # noqa: E501

        :return: The printed of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._printed

    @printed.setter
    def printed(self, printed):
        """Sets the printed of this UserResourceSharingRequest2.

        Indication whether the request is printed. Output parameter. Relevant for lending requests.  # noqa: E501

        :param printed: The printed of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._printed = printed

    @property
    def reported(self):
        """Gets the reported of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether the request is reported. Output parameter. Relevant for lending requests.  # noqa: E501

        :return: The reported of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._reported

    @reported.setter
    def reported(self, reported):
        """Sets the reported of this UserResourceSharingRequest2.

        Indication whether the request is reported. Output parameter. Relevant for lending requests.  # noqa: E501

        :param reported: The reported of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._reported = reported

    @property
    def level_of_service(self):
        """Gets the level_of_service of this UserResourceSharingRequest2.  # noqa: E501

        The code of the resource sharing request Level of Service. Possible options are listed in 'LevelOfService' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API), default is generated per request.  # noqa: E501

        :return: The level_of_service of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: object
        """
        return self._level_of_service

    @level_of_service.setter
    def level_of_service(self, level_of_service):
        """Sets the level_of_service of this UserResourceSharingRequest2.

        The code of the resource sharing request Level of Service. Possible options are listed in 'LevelOfService' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API), default is generated per request.  # noqa: E501

        :param level_of_service: The level_of_service of this UserResourceSharingRequest2.  # noqa: E501
        :type: object
        """

        self._level_of_service = level_of_service

    @property
    def mms_id(self):
        """Gets the mms_id of this UserResourceSharingRequest2.  # noqa: E501

        MMS ID of the requested resource. Borrowing request: this is relevant after physical material has arrived. Lending request: if supplied when creating a request, the request will be attached to this bib record. See [GET BIB API](https://developers.exlibrisgroup.com/alma/apis/bibs/GET/gwPcGly021om4RTvtjbPleCklCGxeYAf3JPdiJpJhUA=/af2fb69d-64f4-42bc-bb05-d8a0ae56936e).  # noqa: E501

        :return: The mms_id of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._mms_id

    @mms_id.setter
    def mms_id(self, mms_id):
        """Sets the mms_id of this UserResourceSharingRequest2.

        MMS ID of the requested resource. Borrowing request: this is relevant after physical material has arrived. Lending request: if supplied when creating a request, the request will be attached to this bib record. See [GET BIB API](https://developers.exlibrisgroup.com/alma/apis/bibs/GET/gwPcGly021om4RTvtjbPleCklCGxeYAf3JPdiJpJhUA=/af2fb69d-64f4-42bc-bb05-d8a0ae56936e).  # noqa: E501

        :param mms_id: The mms_id of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._mms_id = mms_id

    @property
    def barcode(self):
        """Gets the barcode of this UserResourceSharingRequest2.  # noqa: E501

        Barcode of the requested resource.  # noqa: E501

        :return: The barcode of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this UserResourceSharingRequest2.

        Barcode of the requested resource.  # noqa: E501

        :param barcode: The barcode of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def additional_barcode(self):
        """Gets the additional_barcode of this UserResourceSharingRequest2.  # noqa: E501


        :return: The additional_barcode of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: AdditionalBarcodes
        """
        return self._additional_barcode

    @additional_barcode.setter
    def additional_barcode(self, additional_barcode):
        """Sets the additional_barcode of this UserResourceSharingRequest2.


        :param additional_barcode: The additional_barcode of this UserResourceSharingRequest2.  # noqa: E501
        :type: AdditionalBarcodes
        """

        self._additional_barcode = additional_barcode

    @property
    def title(self):
        """Gets the title of this UserResourceSharingRequest2.  # noqa: E501

        Title of the requested resource. Mandatory unless mms_id is supplied.  # noqa: E501

        :return: The title of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserResourceSharingRequest2.

        Title of the requested resource. Mandatory unless mms_id is supplied.  # noqa: E501

        :param title: The title of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def issn(self):
        """Gets the issn of this UserResourceSharingRequest2.  # noqa: E501

        ISSN of the requested resource.  # noqa: E501

        :return: The issn of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._issn

    @issn.setter
    def issn(self, issn):
        """Sets the issn of this UserResourceSharingRequest2.

        ISSN of the requested resource.  # noqa: E501

        :param issn: The issn of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._issn = issn

    @property
    def isbn(self):
        """Gets the isbn of this UserResourceSharingRequest2.  # noqa: E501

        ISBN of the requested resource.  # noqa: E501

        :return: The isbn of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this UserResourceSharingRequest2.

        ISBN of the requested resource.  # noqa: E501

        :param isbn: The isbn of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._isbn = isbn

    @property
    def author(self):
        """Gets the author of this UserResourceSharingRequest2.  # noqa: E501

        Author of the requested resource.  # noqa: E501

        :return: The author of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this UserResourceSharingRequest2.

        Author of the requested resource.  # noqa: E501

        :param author: The author of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def author_initials(self):
        """Gets the author_initials of this UserResourceSharingRequest2.  # noqa: E501

        Author initials of the requested resource.  # noqa: E501

        :return: The author_initials of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._author_initials

    @author_initials.setter
    def author_initials(self, author_initials):
        """Sets the author_initials of this UserResourceSharingRequest2.

        Author initials of the requested resource.  # noqa: E501

        :param author_initials: The author_initials of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._author_initials = author_initials

    @property
    def year(self):
        """Gets the year of this UserResourceSharingRequest2.  # noqa: E501

        Publication date of the requested resource.  # noqa: E501

        :return: The year of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this UserResourceSharingRequest2.

        Publication date of the requested resource.  # noqa: E501

        :param year: The year of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def publisher(self):
        """Gets the publisher of this UserResourceSharingRequest2.  # noqa: E501

        Publisher of the requested resource.  # noqa: E501

        :return: The publisher of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this UserResourceSharingRequest2.

        Publisher of the requested resource.  # noqa: E501

        :param publisher: The publisher of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def place_of_publication(self):
        """Gets the place_of_publication of this UserResourceSharingRequest2.  # noqa: E501

        The publication place of the requested resource.  # noqa: E501

        :return: The place_of_publication of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._place_of_publication

    @place_of_publication.setter
    def place_of_publication(self, place_of_publication):
        """Sets the place_of_publication of this UserResourceSharingRequest2.

        The publication place of the requested resource.  # noqa: E501

        :param place_of_publication: The place_of_publication of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._place_of_publication = place_of_publication

    @property
    def edition(self):
        """Gets the edition of this UserResourceSharingRequest2.  # noqa: E501

        The edition of the requested resource.  # noqa: E501

        :return: The edition of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this UserResourceSharingRequest2.

        The edition of the requested resource.  # noqa: E501

        :param edition: The edition of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._edition = edition

    @property
    def specific_edition(self):
        """Gets the specific_edition of this UserResourceSharingRequest2.  # noqa: E501

        Indication whether edition is used in ISO Protocol and in Locate process. Default is true. Relevant when a book is requested.  # noqa: E501

        :return: The specific_edition of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: bool
        """
        return self._specific_edition

    @specific_edition.setter
    def specific_edition(self, specific_edition):
        """Sets the specific_edition of this UserResourceSharingRequest2.

        Indication whether edition is used in ISO Protocol and in Locate process. Default is true. Relevant when a book is requested.  # noqa: E501

        :param specific_edition: The specific_edition of this UserResourceSharingRequest2.  # noqa: E501
        :type: bool
        """

        self._specific_edition = specific_edition

    @property
    def volume(self):
        """Gets the volume of this UserResourceSharingRequest2.  # noqa: E501

        The volume number of the journal that contains the article.  # noqa: E501

        :return: The volume of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this UserResourceSharingRequest2.

        The volume number of the journal that contains the article.  # noqa: E501

        :param volume: The volume of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def journal_title(self):
        """Gets the journal_title of this UserResourceSharingRequest2.  # noqa: E501

        The title of the journal. Relevant when an article is requested.  # noqa: E501

        :return: The journal_title of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._journal_title

    @journal_title.setter
    def journal_title(self, journal_title):
        """Sets the journal_title of this UserResourceSharingRequest2.

        The title of the journal. Relevant when an article is requested.  # noqa: E501

        :param journal_title: The journal_title of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._journal_title = journal_title

    @property
    def issue(self):
        """Gets the issue of this UserResourceSharingRequest2.  # noqa: E501

        The issue of the requested resource.  # noqa: E501

        :return: The issue of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this UserResourceSharingRequest2.

        The issue of the requested resource.  # noqa: E501

        :param issue: The issue of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def chapter(self):
        """Gets the chapter of this UserResourceSharingRequest2.  # noqa: E501

        The chapter number in the journal that contains the article.  # noqa: E501

        :return: The chapter of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this UserResourceSharingRequest2.

        The chapter number in the journal that contains the article.  # noqa: E501

        :param chapter: The chapter of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._chapter = chapter

    @property
    def chapter_title(self):
        """Gets the chapter_title of this UserResourceSharingRequest2.  # noqa: E501

        For a book chapter, the title of this chapter.  # noqa: E501

        :return: The chapter_title of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._chapter_title

    @chapter_title.setter
    def chapter_title(self, chapter_title):
        """Sets the chapter_title of this UserResourceSharingRequest2.

        For a book chapter, the title of this chapter.  # noqa: E501

        :param chapter_title: The chapter_title of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._chapter_title = chapter_title

    @property
    def chapter_author(self):
        """Gets the chapter_author of this UserResourceSharingRequest2.  # noqa: E501

        For a book chapter, the author of this chapter.  # noqa: E501

        :return: The chapter_author of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._chapter_author

    @chapter_author.setter
    def chapter_author(self, chapter_author):
        """Sets the chapter_author of this UserResourceSharingRequest2.

        For a book chapter, the author of this chapter.  # noqa: E501

        :param chapter_author: The chapter_author of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._chapter_author = chapter_author

    @property
    def editor(self):
        """Gets the editor of this UserResourceSharingRequest2.  # noqa: E501

        The editor of the book (typically used for books where chapters have different authors).  # noqa: E501

        :return: The editor of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this UserResourceSharingRequest2.

        The editor of the book (typically used for books where chapters have different authors).  # noqa: E501

        :param editor: The editor of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def pages(self):
        """Gets the pages of this UserResourceSharingRequest2.  # noqa: E501

        The relevant pages of the requested resource.  # noqa: E501

        :return: The pages of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this UserResourceSharingRequest2.

        The relevant pages of the requested resource.  # noqa: E501

        :param pages: The pages of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._pages = pages

    @property
    def start_page(self):
        """Gets the start_page of this UserResourceSharingRequest2.  # noqa: E501

        The relevant start page of the requested resource.  # noqa: E501

        :return: The start_page of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._start_page

    @start_page.setter
    def start_page(self, start_page):
        """Sets the start_page of this UserResourceSharingRequest2.

        The relevant start page of the requested resource.  # noqa: E501

        :param start_page: The start_page of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._start_page = start_page

    @property
    def end_page(self):
        """Gets the end_page of this UserResourceSharingRequest2.  # noqa: E501

        The end page of the requested resource.  # noqa: E501

        :return: The end_page of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._end_page

    @end_page.setter
    def end_page(self, end_page):
        """Sets the end_page of this UserResourceSharingRequest2.

        The end page of the requested resource.  # noqa: E501

        :param end_page: The end_page of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._end_page = end_page

    @property
    def part(self):
        """Gets the part of this UserResourceSharingRequest2.  # noqa: E501

        The part of the requested resource.  # noqa: E501

        :return: The part of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this UserResourceSharingRequest2.

        The part of the requested resource.  # noqa: E501

        :param part: The part of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._part = part

    @property
    def source(self):
        """Gets the source of this UserResourceSharingRequest2.  # noqa: E501

        The source of the requested resource.  # noqa: E501

        :return: The source of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UserResourceSharingRequest2.

        The source of the requested resource.  # noqa: E501

        :param source: The source of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def series_title_number(self):
        """Gets the series_title_number of this UserResourceSharingRequest2.  # noqa: E501

        The series title number of the requested resource.  # noqa: E501

        :return: The series_title_number of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._series_title_number

    @series_title_number.setter
    def series_title_number(self, series_title_number):
        """Sets the series_title_number of this UserResourceSharingRequest2.

        The series title number of the requested resource.  # noqa: E501

        :param series_title_number: The series_title_number of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._series_title_number = series_title_number

    @property
    def doi(self):
        """Gets the doi of this UserResourceSharingRequest2.  # noqa: E501

        The doi of the requested resource.  # noqa: E501

        :return: The doi of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this UserResourceSharingRequest2.

        The doi of the requested resource.  # noqa: E501

        :param doi: The doi of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._doi = doi

    @property
    def pmid(self):
        """Gets the pmid of this UserResourceSharingRequest2.  # noqa: E501

        The pmid of the requested resource.  # noqa: E501

        :return: The pmid of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._pmid

    @pmid.setter
    def pmid(self, pmid):
        """Sets the pmid of this UserResourceSharingRequest2.

        The pmid of the requested resource.  # noqa: E501

        :param pmid: The pmid of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._pmid = pmid

    @property
    def additional_person_name(self):
        """Gets the additional_person_name of this UserResourceSharingRequest2.  # noqa: E501

        The name of an additional contact.  # noqa: E501

        :return: The additional_person_name of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._additional_person_name

    @additional_person_name.setter
    def additional_person_name(self, additional_person_name):
        """Sets the additional_person_name of this UserResourceSharingRequest2.

        The name of an additional contact.  # noqa: E501

        :param additional_person_name: The additional_person_name of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._additional_person_name = additional_person_name

    @property
    def call_number(self):
        """Gets the call_number of this UserResourceSharingRequest2.  # noqa: E501

        The call number of the book. Indicates the library shelf on which the books are located.  # noqa: E501

        :return: The call_number of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """Sets the call_number of this UserResourceSharingRequest2.

        The call number of the book. Indicates the library shelf on which the books are located.  # noqa: E501

        :param call_number: The call_number of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._call_number = call_number

    @property
    def bib_note(self):
        """Gets the bib_note of this UserResourceSharingRequest2.  # noqa: E501

        The note of the bibliographic record.  # noqa: E501

        :return: The bib_note of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._bib_note

    @bib_note.setter
    def bib_note(self, bib_note):
        """Sets the bib_note of this UserResourceSharingRequest2.

        The note of the bibliographic record.  # noqa: E501

        :param bib_note: The bib_note of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._bib_note = bib_note

    @property
    def lcc_number(self):
        """Gets the lcc_number of this UserResourceSharingRequest2.  # noqa: E501

        The library of congress number of the book.  # noqa: E501

        :return: The lcc_number of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._lcc_number

    @lcc_number.setter
    def lcc_number(self, lcc_number):
        """Sets the lcc_number of this UserResourceSharingRequest2.

        The library of congress number of the book.  # noqa: E501

        :param lcc_number: The lcc_number of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._lcc_number = lcc_number

    @property
    def oclc_number(self):
        """Gets the oclc_number of this UserResourceSharingRequest2.  # noqa: E501

        The oclc number of the book.  # noqa: E501

        :return: The oclc_number of this UserResourceSharingRequest2.  # noqa: E501
        :rtype: str
        """
        return self._oclc_number

    @oclc_number.setter
    def oclc_number(self, oclc_number):
        """Sets the oclc_number of this UserResourceSharingRequest2.

        The oclc number of the book.  # noqa: E501

        :param oclc_number: The oclc_number of this UserResourceSharingRequest2.  # noqa: E501
        :type: str
        """

        self._oclc_number = oclc_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResourceSharingRequest2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResourceSharingRequest2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
