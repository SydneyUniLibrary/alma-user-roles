# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LegantoNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_type': 'str',
        'list_name': 'str',
        'list_id': 'str',
        'section_id': 'str',
        'citation_id': 'str',
        'course_id': 'str',
        'course_name': 'str',
        'collaborator_name': 'str',
        'citation_title': 'str',
        'section_name': 'str',
        'note': 'str',
        'tag': 'str',
        'due_date': 'date',
        'submit_by': 'date',
        'by_user': 'str',
        '_date': 'date'
    }

    attribute_map = {
        'notification_type': 'notification_type',
        'list_name': 'list_name',
        'list_id': 'list_id',
        'section_id': 'section_id',
        'citation_id': 'citation_id',
        'course_id': 'course_id',
        'course_name': 'course_name',
        'collaborator_name': 'collaborator_name',
        'citation_title': 'citation_title',
        'section_name': 'section_name',
        'note': 'note',
        'tag': 'tag',
        'due_date': 'due_date',
        'submit_by': 'submit_by',
        'by_user': 'by_user',
        '_date': 'date'
    }

    def __init__(self, notification_type=None, list_name=None, list_id=None, section_id=None, citation_id=None, course_id=None, course_name=None, collaborator_name=None, citation_title=None, section_name=None, note=None, tag=None, due_date=None, submit_by=None, by_user=None, _date=None):  # noqa: E501
        """LegantoNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_type = None
        self._list_name = None
        self._list_id = None
        self._section_id = None
        self._citation_id = None
        self._course_id = None
        self._course_name = None
        self._collaborator_name = None
        self._citation_title = None
        self._section_name = None
        self._note = None
        self._tag = None
        self._due_date = None
        self._submit_by = None
        self._by_user = None
        self.__date = None
        self.discriminator = None
        self.notification_type = notification_type
        if list_name is not None:
            self.list_name = list_name
        if list_id is not None:
            self.list_id = list_id
        if section_id is not None:
            self.section_id = section_id
        if citation_id is not None:
            self.citation_id = citation_id
        if course_id is not None:
            self.course_id = course_id
        if course_name is not None:
            self.course_name = course_name
        if collaborator_name is not None:
            self.collaborator_name = collaborator_name
        if citation_title is not None:
            self.citation_title = citation_title
        if section_name is not None:
            self.section_name = section_name
        if note is not None:
            self.note = note
        if tag is not None:
            self.tag = tag
        if due_date is not None:
            self.due_date = due_date
        if submit_by is not None:
            self.submit_by = submit_by
        self.by_user = by_user
        self._date = _date

    @property
    def notification_type(self):
        """Gets the notification_type of this LegantoNotification.  # noqa: E501

        The type of notification that is being sent to the user.  # noqa: E501

        :return: The notification_type of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this LegantoNotification.

        The type of notification that is being sent to the user.  # noqa: E501

        :param notification_type: The notification_type of this LegantoNotification.  # noqa: E501
        :type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def list_name(self):
        """Gets the list_name of this LegantoNotification.  # noqa: E501

        Name of the Reading List.  # noqa: E501

        :return: The list_name of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this LegantoNotification.

        Name of the Reading List.  # noqa: E501

        :param list_name: The list_name of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def list_id(self):
        """Gets the list_id of this LegantoNotification.  # noqa: E501

        Identifier of the Reading List in Alma  # noqa: E501

        :return: The list_id of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this LegantoNotification.

        Identifier of the Reading List in Alma  # noqa: E501

        :param list_id: The list_id of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def section_id(self):
        """Gets the section_id of this LegantoNotification.  # noqa: E501

        Identifier of the section in Alma  # noqa: E501

        :return: The section_id of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this LegantoNotification.

        Identifier of the section in Alma  # noqa: E501

        :param section_id: The section_id of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._section_id = section_id

    @property
    def citation_id(self):
        """Gets the citation_id of this LegantoNotification.  # noqa: E501

        Identifier of the citation in Alma  # noqa: E501

        :return: The citation_id of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._citation_id

    @citation_id.setter
    def citation_id(self, citation_id):
        """Sets the citation_id of this LegantoNotification.

        Identifier of the citation in Alma  # noqa: E501

        :param citation_id: The citation_id of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._citation_id = citation_id

    @property
    def course_id(self):
        """Gets the course_id of this LegantoNotification.  # noqa: E501

        Identifier of the Course in Alma  # noqa: E501

        :return: The course_id of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this LegantoNotification.

        Identifier of the Course in Alma  # noqa: E501

        :param course_id: The course_id of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._course_id = course_id

    @property
    def course_name(self):
        """Gets the course_name of this LegantoNotification.  # noqa: E501

        The course name.  # noqa: E501

        :return: The course_name of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._course_name

    @course_name.setter
    def course_name(self, course_name):
        """Sets the course_name of this LegantoNotification.

        The course name.  # noqa: E501

        :param course_name: The course_name of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._course_name = course_name

    @property
    def collaborator_name(self):
        """Gets the collaborator_name of this LegantoNotification.  # noqa: E501

        The name of the added collaborator.  # noqa: E501

        :return: The collaborator_name of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._collaborator_name

    @collaborator_name.setter
    def collaborator_name(self, collaborator_name):
        """Sets the collaborator_name of this LegantoNotification.

        The name of the added collaborator.  # noqa: E501

        :param collaborator_name: The collaborator_name of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._collaborator_name = collaborator_name

    @property
    def citation_title(self):
        """Gets the citation_title of this LegantoNotification.  # noqa: E501

        Title of the citation.  # noqa: E501

        :return: The citation_title of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._citation_title

    @citation_title.setter
    def citation_title(self, citation_title):
        """Sets the citation_title of this LegantoNotification.

        Title of the citation.  # noqa: E501

        :param citation_title: The citation_title of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._citation_title = citation_title

    @property
    def section_name(self):
        """Gets the section_name of this LegantoNotification.  # noqa: E501

        Name of the section  # noqa: E501

        :return: The section_name of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this LegantoNotification.

        Name of the section  # noqa: E501

        :param section_name: The section_name of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._section_name = section_name

    @property
    def note(self):
        """Gets the note of this LegantoNotification.  # noqa: E501

        A public note that appears in citation in Leganto  # noqa: E501

        :return: The note of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LegantoNotification.

        A public note that appears in citation in Leganto  # noqa: E501

        :param note: The note of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def tag(self):
        """Gets the tag of this LegantoNotification.  # noqa: E501

        The tag set on the citation or section  # noqa: E501

        :return: The tag of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this LegantoNotification.

        The tag set on the citation or section  # noqa: E501

        :param tag: The tag of this LegantoNotification.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def due_date(self):
        """Gets the due_date of this LegantoNotification.  # noqa: E501

        The date by which students should read/view the materials.  # noqa: E501

        :return: The due_date of this LegantoNotification.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this LegantoNotification.

        The date by which students should read/view the materials.  # noqa: E501

        :param due_date: The due_date of this LegantoNotification.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def submit_by(self):
        """Gets the submit_by of this LegantoNotification.  # noqa: E501

        The date in which the action in the notification took place.  # noqa: E501

        :return: The submit_by of this LegantoNotification.  # noqa: E501
        :rtype: date
        """
        return self._submit_by

    @submit_by.setter
    def submit_by(self, submit_by):
        """Sets the submit_by of this LegantoNotification.

        The date in which the action in the notification took place.  # noqa: E501

        :param submit_by: The submit_by of this LegantoNotification.  # noqa: E501
        :type: date
        """

        self._submit_by = submit_by

    @property
    def by_user(self):
        """Gets the by_user of this LegantoNotification.  # noqa: E501

        The user who perform the operation  # noqa: E501

        :return: The by_user of this LegantoNotification.  # noqa: E501
        :rtype: str
        """
        return self._by_user

    @by_user.setter
    def by_user(self, by_user):
        """Sets the by_user of this LegantoNotification.

        The user who perform the operation  # noqa: E501

        :param by_user: The by_user of this LegantoNotification.  # noqa: E501
        :type: str
        """
        if by_user is None:
            raise ValueError("Invalid value for `by_user`, must not be `None`")  # noqa: E501

        self._by_user = by_user

    @property
    def _date(self):
        """Gets the _date of this LegantoNotification.  # noqa: E501

        date  # noqa: E501

        :return: The _date of this LegantoNotification.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LegantoNotification.

        date  # noqa: E501

        :param _date: The _date of this LegantoNotification.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegantoNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegantoNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
