# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PurchaseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'object',
        'owning_library': 'object',
        'estimated_cost': 'object',
        'fund': 'object',
        'vendor': 'object',
        'vendor_account': 'str',
        'requester_note': 'str',
        'resource_metadata': 'object',
        'notes': 'list[object]',
        'location': 'list[object]'
    }

    attribute_map = {
        'format': 'format',
        'owning_library': 'owning_library',
        'estimated_cost': 'estimated_cost',
        'fund': 'fund',
        'vendor': 'vendor',
        'vendor_account': 'vendor_account',
        'requester_note': 'requester_note',
        'resource_metadata': 'resource_metadata',
        'notes': 'notes',
        'location': 'location'
    }

    def __init__(self, format=None, owning_library=None, estimated_cost=None, fund=None, vendor=None, vendor_account=None, requester_note=None, resource_metadata=None, notes=None, location=None):  # noqa: E501
        """PurchaseRequest - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._owning_library = None
        self._estimated_cost = None
        self._fund = None
        self._vendor = None
        self._vendor_account = None
        self._requester_note = None
        self._resource_metadata = None
        self._notes = None
        self._location = None
        self.discriminator = None
        if format is not None:
            self.format = format
        if owning_library is not None:
            self.owning_library = owning_library
        if estimated_cost is not None:
            self.estimated_cost = estimated_cost
        if fund is not None:
            self.fund = fund
        if vendor is not None:
            self.vendor = vendor
        if vendor_account is not None:
            self.vendor_account = vendor_account
        if requester_note is not None:
            self.requester_note = requester_note
        self.resource_metadata = resource_metadata
        if notes is not None:
            self.notes = notes
        if location is not None:
            self.location = location

    @property
    def format(self):
        """Gets the format of this PurchaseRequest.  # noqa: E501

        Whether the item should be acquired in electronic or physical format. Possible values are listed in 'PR_RequestedFormat' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is Physical.  # noqa: E501

        :return: The format of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PurchaseRequest.

        Whether the item should be acquired in electronic or physical format. Possible values are listed in 'PR_RequestedFormat' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is Physical.  # noqa: E501

        :param format: The format of this PurchaseRequest.  # noqa: E501
        :type: object
        """

        self._format = format

    @property
    def owning_library(self):
        """Gets the owning_library of this PurchaseRequest.  # noqa: E501

        The library that should receive the item. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :return: The owning_library of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._owning_library

    @owning_library.setter
    def owning_library(self, owning_library):
        """Sets the owning_library of this PurchaseRequest.

        The library that should receive the item. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :param owning_library: The owning_library of this PurchaseRequest.  # noqa: E501
        :type: object
        """

        self._owning_library = owning_library

    @property
    def estimated_cost(self):
        """Gets the estimated_cost of this PurchaseRequest.  # noqa: E501


        :return: The estimated_cost of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._estimated_cost

    @estimated_cost.setter
    def estimated_cost(self, estimated_cost):
        """Sets the estimated_cost of this PurchaseRequest.


        :param estimated_cost: The estimated_cost of this PurchaseRequest.  # noqa: E501
        :type: object
        """

        self._estimated_cost = estimated_cost

    @property
    def fund(self):
        """Gets the fund of this PurchaseRequest.  # noqa: E501

        The fund code. See [Get funds API](https://developers.exlibrisgroup.com/alma/apis/acq/GET/gwPcGly021oUHLI4O/zpt8U7ewiJYRLM/d5b14609-b590-470e-baba-9944682f8c7e).  # noqa: E501

        :return: The fund of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._fund

    @fund.setter
    def fund(self, fund):
        """Sets the fund of this PurchaseRequest.

        The fund code. See [Get funds API](https://developers.exlibrisgroup.com/alma/apis/acq/GET/gwPcGly021oUHLI4O/zpt8U7ewiJYRLM/d5b14609-b590-470e-baba-9944682f8c7e).  # noqa: E501

        :param fund: The fund of this PurchaseRequest.  # noqa: E501
        :type: object
        """

        self._fund = fund

    @property
    def vendor(self):
        """Gets the vendor of this PurchaseRequest.  # noqa: E501

        The vendor code from which to purchase the item. If vendor is supplied, vendor account should be suplied as well.  # noqa: E501

        :return: The vendor of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this PurchaseRequest.

        The vendor code from which to purchase the item. If vendor is supplied, vendor account should be suplied as well.  # noqa: E501

        :param vendor: The vendor of this PurchaseRequest.  # noqa: E501
        :type: object
        """

        self._vendor = vendor

    @property
    def vendor_account(self):
        """Gets the vendor_account of this PurchaseRequest.  # noqa: E501

        The vendor account code. Must be a valid account of the vendor.  # noqa: E501

        :return: The vendor_account of this PurchaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._vendor_account

    @vendor_account.setter
    def vendor_account(self, vendor_account):
        """Sets the vendor_account of this PurchaseRequest.

        The vendor account code. Must be a valid account of the vendor.  # noqa: E501

        :param vendor_account: The vendor_account of this PurchaseRequest.  # noqa: E501
        :type: str
        """

        self._vendor_account = vendor_account

    @property
    def requester_note(self):
        """Gets the requester_note of this PurchaseRequest.  # noqa: E501

        Any note to send to the user who will be approving or rejecting the request.  # noqa: E501

        :return: The requester_note of this PurchaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._requester_note

    @requester_note.setter
    def requester_note(self, requester_note):
        """Sets the requester_note of this PurchaseRequest.

        Any note to send to the user who will be approving or rejecting the request.  # noqa: E501

        :param requester_note: The requester_note of this PurchaseRequest.  # noqa: E501
        :type: str
        """

        self._requester_note = requester_note

    @property
    def resource_metadata(self):
        """Gets the resource_metadata of this PurchaseRequest.  # noqa: E501

        In order to create a purchase request, the bibliographic information should be supplied. 2 ways are supported: 1. Supply mms_id - in this case the purchase request will be attached to this mms_id. No need to supply additional bibliographic information in this case (if supplied it will be ignored). 2. Supply bibliographic information - in this case title is mandatory. Alma will try to match this information with an existing BIB record. The match routine is according to the definition of purchase_request_import_profile customer parameter. If no profile is specified in the parameter, the matching is based on the ISBN/ISSN in the purchase request (using a hard-coded matching routine that cannot be modified). If a matching record is found in the repository, the purchase request is linked to this bibliographic record. If no match is found, a new bibliographic record is created.  # noqa: E501

        :return: The resource_metadata of this PurchaseRequest.  # noqa: E501
        :rtype: object
        """
        return self._resource_metadata

    @resource_metadata.setter
    def resource_metadata(self, resource_metadata):
        """Sets the resource_metadata of this PurchaseRequest.

        In order to create a purchase request, the bibliographic information should be supplied. 2 ways are supported: 1. Supply mms_id - in this case the purchase request will be attached to this mms_id. No need to supply additional bibliographic information in this case (if supplied it will be ignored). 2. Supply bibliographic information - in this case title is mandatory. Alma will try to match this information with an existing BIB record. The match routine is according to the definition of purchase_request_import_profile customer parameter. If no profile is specified in the parameter, the matching is based on the ISBN/ISSN in the purchase request (using a hard-coded matching routine that cannot be modified). If a matching record is found in the repository, the purchase request is linked to this bibliographic record. If no match is found, a new bibliographic record is created.  # noqa: E501

        :param resource_metadata: The resource_metadata of this PurchaseRequest.  # noqa: E501
        :type: object
        """
        if resource_metadata is None:
            raise ValueError("Invalid value for `resource_metadata`, must not be `None`")  # noqa: E501

        self._resource_metadata = resource_metadata

    @property
    def notes(self):
        """Gets the notes of this PurchaseRequest.  # noqa: E501

        List of related notes. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.  # noqa: E501

        :return: The notes of this PurchaseRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PurchaseRequest.

        List of related notes. In the PUT action the incoming list will replace the existing list. If the incoming list is empty, the existing list will be deleted.  # noqa: E501

        :param notes: The notes of this PurchaseRequest.  # noqa: E501
        :type: list[object]
        """

        self._notes = notes

    @property
    def location(self):
        """Gets the location of this PurchaseRequest.  # noqa: E501

        Information about the locations in which the ordered items will be stored. Relevant only for physical. See [Get locations API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAreHxJz3zVZbDL9ogrSqDbgE+r4q6vcJ0xBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :return: The location of this PurchaseRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PurchaseRequest.

        Information about the locations in which the ordered items will be stored. Relevant only for physical. See [Get locations API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAreHxJz3zVZbDL9ogrSqDbgE+r4q6vcJ0xBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed).  # noqa: E501

        :param location: The location of this PurchaseRequest.  # noqa: E501
        :type: list[object]
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
