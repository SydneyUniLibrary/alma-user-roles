# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from alma_sdk.models.contact_info2 import ContactInfo2  # noqa: F401,E501
from alma_sdk.models.library_notices2 import LibraryNotices2  # noqa: F401,E501
from alma_sdk.models.proxy_for_users import ProxyForUsers  # noqa: F401,E501
from alma_sdk.models.rest_researcher import RestResearcher  # noqa: F401,E501
from alma_sdk.models.rs_libraries2 import RsLibraries2  # noqa: F401,E501
from alma_sdk.models.user_blocks2 import UserBlocks2  # noqa: F401,E501
from alma_sdk.models.user_identifiers2 import UserIdentifiers2  # noqa: F401,E501
from alma_sdk.models.user_notes2 import UserNotes2  # noqa: F401,E501
from alma_sdk.models.user_roles2 import UserRoles2  # noqa: F401,E501
from alma_sdk.models.user_statistics2 import UserStatistics2  # noqa: F401,E501


class User2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'record_type': 'object',
        'primary_id': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'full_name': 'str',
        'pin_number': 'str',
        'user_title': 'object',
        'job_category': 'object',
        'job_description': 'str',
        'gender': 'object',
        'user_group': 'object',
        'campus_code': 'object',
        'web_site_url': 'str',
        'cataloger_level': 'object',
        'preferred_language': 'object',
        'birth_date': 'date',
        'expiry_date': 'date',
        'purge_date': 'date',
        'account_type': 'object',
        'external_id': 'str',
        'password': 'str',
        'force_password_change': 'str',
        'status': 'object',
        'status_date': 'date',
        'requests': 'object',
        'loans': 'object',
        'fees': 'object',
        'contact_info': 'ContactInfo2',
        'user_identifier': 'UserIdentifiers2',
        'user_role': 'UserRoles2',
        'user_block': 'UserBlocks2',
        'user_note': 'UserNotes2',
        'user_statistic': 'UserStatistics2',
        'proxy_for_user': 'ProxyForUsers',
        'rs_library': 'RsLibraries2',
        'library_notice': 'LibraryNotices2',
        'source_link_id': 'str',
        'source_institution_code': 'str',
        'linking_id': 'str',
        'pref_first_name': 'str',
        'pref_middle_name': 'str',
        'pref_last_name': 'str',
        'is_researcher': 'bool',
        'researcher': 'RestResearcher'
    }

    attribute_map = {
        'link': 'link',
        'record_type': 'record_type',
        'primary_id': 'primary_id',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'full_name': 'full_name',
        'pin_number': 'pin_number',
        'user_title': 'user_title',
        'job_category': 'job_category',
        'job_description': 'job_description',
        'gender': 'gender',
        'user_group': 'user_group',
        'campus_code': 'campus_code',
        'web_site_url': 'web_site_url',
        'cataloger_level': 'cataloger_level',
        'preferred_language': 'preferred_language',
        'birth_date': 'birth_date',
        'expiry_date': 'expiry_date',
        'purge_date': 'purge_date',
        'account_type': 'account_type',
        'external_id': 'external_id',
        'password': 'password',
        'force_password_change': 'force_password_change',
        'status': 'status',
        'status_date': 'status_date',
        'requests': 'requests',
        'loans': 'loans',
        'fees': 'fees',
        'contact_info': 'contact_info',
        'user_identifier': 'user_identifier',
        'user_role': 'user_role',
        'user_block': 'user_block',
        'user_note': 'user_note',
        'user_statistic': 'user_statistic',
        'proxy_for_user': 'proxy_for_user',
        'rs_library': 'rs_library',
        'library_notice': 'library_notice',
        'source_link_id': 'source_link_id',
        'source_institution_code': 'source_institution_code',
        'linking_id': 'linking_id',
        'pref_first_name': 'pref_first_name',
        'pref_middle_name': 'pref_middle_name',
        'pref_last_name': 'pref_last_name',
        'is_researcher': 'is_researcher',
        'researcher': 'researcher'
    }

    def __init__(self, link=None, record_type=None, primary_id=None, first_name=None, middle_name=None, last_name=None, full_name=None, pin_number=None, user_title=None, job_category=None, job_description=None, gender=None, user_group=None, campus_code=None, web_site_url=None, cataloger_level=None, preferred_language=None, birth_date=None, expiry_date=None, purge_date=None, account_type=None, external_id=None, password=None, force_password_change=None, status=None, status_date=None, requests=None, loans=None, fees=None, contact_info=None, user_identifier=None, user_role=None, user_block=None, user_note=None, user_statistic=None, proxy_for_user=None, rs_library=None, library_notice=None, source_link_id=None, source_institution_code=None, linking_id=None, pref_first_name=None, pref_middle_name=None, pref_last_name=None, is_researcher=None, researcher=None):  # noqa: E501
        """User2 - a model defined in Swagger"""  # noqa: E501
        self._link = None
        self._record_type = None
        self._primary_id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._full_name = None
        self._pin_number = None
        self._user_title = None
        self._job_category = None
        self._job_description = None
        self._gender = None
        self._user_group = None
        self._campus_code = None
        self._web_site_url = None
        self._cataloger_level = None
        self._preferred_language = None
        self._birth_date = None
        self._expiry_date = None
        self._purge_date = None
        self._account_type = None
        self._external_id = None
        self._password = None
        self._force_password_change = None
        self._status = None
        self._status_date = None
        self._requests = None
        self._loans = None
        self._fees = None
        self._contact_info = None
        self._user_identifier = None
        self._user_role = None
        self._user_block = None
        self._user_note = None
        self._user_statistic = None
        self._proxy_for_user = None
        self._rs_library = None
        self._library_notice = None
        self._source_link_id = None
        self._source_institution_code = None
        self._linking_id = None
        self._pref_first_name = None
        self._pref_middle_name = None
        self._pref_last_name = None
        self._is_researcher = None
        self._researcher = None
        self.discriminator = None
        if link is not None:
            self.link = link
        if record_type is not None:
            self.record_type = record_type
        if primary_id is not None:
            self.primary_id = primary_id
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if full_name is not None:
            self.full_name = full_name
        if pin_number is not None:
            self.pin_number = pin_number
        if user_title is not None:
            self.user_title = user_title
        if job_category is not None:
            self.job_category = job_category
        if job_description is not None:
            self.job_description = job_description
        if gender is not None:
            self.gender = gender
        if user_group is not None:
            self.user_group = user_group
        if campus_code is not None:
            self.campus_code = campus_code
        if web_site_url is not None:
            self.web_site_url = web_site_url
        if cataloger_level is not None:
            self.cataloger_level = cataloger_level
        if preferred_language is not None:
            self.preferred_language = preferred_language
        if birth_date is not None:
            self.birth_date = birth_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if purge_date is not None:
            self.purge_date = purge_date
        if account_type is not None:
            self.account_type = account_type
        if external_id is not None:
            self.external_id = external_id
        if password is not None:
            self.password = password
        if force_password_change is not None:
            self.force_password_change = force_password_change
        if status is not None:
            self.status = status
        if status_date is not None:
            self.status_date = status_date
        if requests is not None:
            self.requests = requests
        if loans is not None:
            self.loans = loans
        if fees is not None:
            self.fees = fees
        if contact_info is not None:
            self.contact_info = contact_info
        if user_identifier is not None:
            self.user_identifier = user_identifier
        if user_role is not None:
            self.user_role = user_role
        if user_block is not None:
            self.user_block = user_block
        if user_note is not None:
            self.user_note = user_note
        if user_statistic is not None:
            self.user_statistic = user_statistic
        if proxy_for_user is not None:
            self.proxy_for_user = proxy_for_user
        if rs_library is not None:
            self.rs_library = rs_library
        if library_notice is not None:
            self.library_notice = library_notice
        if source_link_id is not None:
            self.source_link_id = source_link_id
        if source_institution_code is not None:
            self.source_institution_code = source_institution_code
        if linking_id is not None:
            self.linking_id = linking_id
        if pref_first_name is not None:
            self.pref_first_name = pref_first_name
        if pref_middle_name is not None:
            self.pref_middle_name = pref_middle_name
        if pref_last_name is not None:
            self.pref_last_name = pref_last_name
        if is_researcher is not None:
            self.is_researcher = is_researcher
        if researcher is not None:
            self.researcher = researcher

    @property
    def link(self):
        """Gets the link of this User2.  # noqa: E501


        :return: The link of this User2.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this User2.


        :param link: The link of this User2.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def record_type(self):
        """Gets the record_type of this User2.  # noqa: E501

        The type of user record. Possible codes are listed in 'AddNewUserOptions' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): Contact, Staff, Public. Mandatory In User API. On SIS load, this field is determined according to the SIS profile.  # noqa: E501

        :return: The record_type of this User2.  # noqa: E501
        :rtype: object
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this User2.

        The type of user record. Possible codes are listed in 'AddNewUserOptions' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API): Contact, Staff, Public. Mandatory In User API. On SIS load, this field is determined according to the SIS profile.  # noqa: E501

        :param record_type: The record_type of this User2.  # noqa: E501
        :type: object
        """

        self._record_type = record_type

    @property
    def primary_id(self):
        """Gets the primary_id of this User2.  # noqa: E501

        The primary identifier of the user. Mandatory In User API. For new users in SIS load , if not supplied, the system will generate a default based on the first and the last name. Note that the primary_id is case insensitive.  # noqa: E501

        :return: The primary_id of this User2.  # noqa: E501
        :rtype: str
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """Sets the primary_id of this User2.

        The primary identifier of the user. Mandatory In User API. For new users in SIS load , if not supplied, the system will generate a default based on the first and the last name. Note that the primary_id is case insensitive.  # noqa: E501

        :param primary_id: The primary_id of this User2.  # noqa: E501
        :type: str
        """

        self._primary_id = primary_id

    @property
    def first_name(self):
        """Gets the first_name of this User2.  # noqa: E501

        The user's first name.  # noqa: E501

        :return: The first_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User2.

        The user's first name.  # noqa: E501

        :param first_name: The first_name of this User2.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this User2.  # noqa: E501

        The user's middle name.  # noqa: E501

        :return: The middle_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this User2.

        The user's middle name.  # noqa: E501

        :param middle_name: The middle_name of this User2.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this User2.  # noqa: E501

        The user's last name.  # noqa: E501

        :return: The last_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User2.

        The user's last name.  # noqa: E501

        :param last_name: The last_name of this User2.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def full_name(self):
        """Gets the full_name of this User2.  # noqa: E501

        The user's full name. Output parameter.  # noqa: E501

        :return: The full_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User2.

        The user's full name. Output parameter.  # noqa: E501

        :param full_name: The full_name of this User2.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def pin_number(self):
        """Gets the pin_number of this User2.  # noqa: E501

        A four-digit number which serves as a password for the user to log on to the selfcheck machine (SIP2). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The pin_number of this User2.  # noqa: E501
        :rtype: str
        """
        return self._pin_number

    @pin_number.setter
    def pin_number(self, pin_number):
        """Sets the pin_number of this User2.

        A four-digit number which serves as a password for the user to log on to the selfcheck machine (SIP2). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param pin_number: The pin_number of this User2.  # noqa: E501
        :type: str
        """

        self._pin_number = pin_number

    @property
    def user_title(self):
        """Gets the user_title of this User2.  # noqa: E501

        The user's title Possible codes are listed in the 'UserTitles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The user_title of this User2.  # noqa: E501
        :rtype: object
        """
        return self._user_title

    @user_title.setter
    def user_title(self, user_title):
        """Sets the user_title of this User2.

        The user's title Possible codes are listed in the 'UserTitles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param user_title: The user_title of this User2.  # noqa: E501
        :type: object
        """

        self._user_title = user_title

    @property
    def job_category(self):
        """Gets the job_category of this User2.  # noqa: E501

        The types of jobs the user performs in the library, such as Cataloger, Circulation Desk Operator, and so forth. Possible values are listed in 'Job Titles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The job_category of this User2.  # noqa: E501
        :rtype: object
        """
        return self._job_category

    @job_category.setter
    def job_category(self, job_category):
        """Sets the job_category of this User2.

        The types of jobs the user performs in the library, such as Cataloger, Circulation Desk Operator, and so forth. Possible values are listed in 'Job Titles' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param job_category: The job_category of this User2.  # noqa: E501
        :type: object
        """

        self._job_category = job_category

    @property
    def job_description(self):
        """Gets the job_description of this User2.  # noqa: E501

        General description of the user's job.  # noqa: E501

        :return: The job_description of this User2.  # noqa: E501
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this User2.

        General description of the user's job.  # noqa: E501

        :param job_description: The job_description of this User2.  # noqa: E501
        :type: str
        """

        self._job_description = job_description

    @property
    def gender(self):
        """Gets the gender of this User2.  # noqa: E501

        The user's gender. Possible codes are listed in the 'Genders' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :return: The gender of this User2.  # noqa: E501
        :rtype: object
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this User2.

        The user's gender. Possible codes are listed in the 'Genders' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API).  # noqa: E501

        :param gender: The gender of this User2.  # noqa: E501
        :type: object
        """

        self._gender = gender

    @property
    def user_group(self):
        """Gets the user_group of this User2.  # noqa: E501

        The group within the institution to which the user belongs. Possible codes are listed in 'User Groups' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Rules for user group usage are define in 'UserRecordTypeUserGroup' mapping table. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The user_group of this User2.  # noqa: E501
        :rtype: object
        """
        return self._user_group

    @user_group.setter
    def user_group(self, user_group):
        """Sets the user_group of this User2.

        The group within the institution to which the user belongs. Possible codes are listed in 'User Groups' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Rules for user group usage are define in 'UserRecordTypeUserGroup' mapping table. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param user_group: The user_group of this User2.  # noqa: E501
        :type: object
        """

        self._user_group = user_group

    @property
    def campus_code(self):
        """Gets the campus_code of this User2.  # noqa: E501

        The code of the campus related to the user. Possible codes are listed in the Campus List of the general configuration menu. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The campus_code of this User2.  # noqa: E501
        :rtype: object
        """
        return self._campus_code

    @campus_code.setter
    def campus_code(self, campus_code):
        """Sets the campus_code of this User2.

        The code of the campus related to the user. Possible codes are listed in the Campus List of the general configuration menu. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param campus_code: The campus_code of this User2.  # noqa: E501
        :type: object
        """

        self._campus_code = campus_code

    @property
    def web_site_url(self):
        """Gets the web_site_url of this User2.  # noqa: E501

        The web site address related to the user.  # noqa: E501

        :return: The web_site_url of this User2.  # noqa: E501
        :rtype: str
        """
        return self._web_site_url

    @web_site_url.setter
    def web_site_url(self, web_site_url):
        """Sets the web_site_url of this User2.

        The web site address related to the user.  # noqa: E501

        :param web_site_url: The web_site_url of this User2.  # noqa: E501
        :type: str
        """

        self._web_site_url = web_site_url

    @property
    def cataloger_level(self):
        """Gets the cataloger_level of this User2.  # noqa: E501

        The cataloger level of the user. The cataloger level serves to control which catalogers can edit and update records which have been edited and updated by other users.  # noqa: E501

        :return: The cataloger_level of this User2.  # noqa: E501
        :rtype: object
        """
        return self._cataloger_level

    @cataloger_level.setter
    def cataloger_level(self, cataloger_level):
        """Sets the cataloger_level of this User2.

        The cataloger level of the user. The cataloger level serves to control which catalogers can edit and update records which have been edited and updated by other users.  # noqa: E501

        :param cataloger_level: The cataloger_level of this User2.  # noqa: E501
        :type: object
        """

        self._cataloger_level = cataloger_level

    @property
    def preferred_language(self):
        """Gets the preferred_language of this User2.  # noqa: E501

        The user's preferred language. Possible codes are listed in 'User Preferred Language' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default: en. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :return: The preferred_language of this User2.  # noqa: E501
        :rtype: object
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this User2.

        The user's preferred language. Possible codes are listed in 'User Preferred Language' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default: en. On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record). For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name. See [blog](https://developers.exlibrisgroup.com/blog/External-user-data-behavior-of-SIS-synchronization-and-API) for more details.  # noqa: E501

        :param preferred_language: The preferred_language of this User2.  # noqa: E501
        :type: object
        """

        self._preferred_language = preferred_language

    @property
    def birth_date(self):
        """Gets the birth_date of this User2.  # noqa: E501

        The user's birth date.  # noqa: E501

        :return: The birth_date of this User2.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this User2.

        The user's birth date.  # noqa: E501

        :param birth_date: The birth_date of this User2.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this User2.  # noqa: E501

        The estimated date when the user is expected to leave the institution.  # noqa: E501

        :return: The expiry_date of this User2.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this User2.

        The estimated date when the user is expected to leave the institution.  # noqa: E501

        :param expiry_date: The expiry_date of this User2.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def purge_date(self):
        """Gets the purge_date of this User2.  # noqa: E501

        The date on which the user is purged from the system.  # noqa: E501

        :return: The purge_date of this User2.  # noqa: E501
        :rtype: date
        """
        return self._purge_date

    @purge_date.setter
    def purge_date(self, purge_date):
        """Sets the purge_date of this User2.

        The date on which the user is purged from the system.  # noqa: E501

        :param purge_date: The purge_date of this User2.  # noqa: E501
        :type: date
        """

        self._purge_date = purge_date

    @property
    def account_type(self):
        """Gets the account_type of this User2.  # noqa: E501

        The user's [account type](https://developers.exlibrisgroup.com/blog/Users-API-working-with-external-internal-users). Possible code are listed in 'User Types - User' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is mandatory in the User API. In the PUT action, it is possible to update Internal user to be External. It is NOT possible to update External user to be Internal. On SIS load, users are always created as External.  # noqa: E501

        :return: The account_type of this User2.  # noqa: E501
        :rtype: object
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this User2.

        The user's [account type](https://developers.exlibrisgroup.com/blog/Users-API-working-with-external-internal-users). Possible code are listed in 'User Types - User' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). This field is mandatory in the User API. In the PUT action, it is possible to update Internal user to be External. It is NOT possible to update External user to be Internal. On SIS load, users are always created as External.  # noqa: E501

        :param account_type: The account_type of this User2.  # noqa: E501
        :type: object
        """

        self._account_type = account_type

    @property
    def external_id(self):
        """Gets the external_id of this User2.  # noqa: E501

        The external system from which the user was loaded into Alma. Relevant only for External users. This field is mandatory during the POST and PUT actions for external users, and must match a valid SIS external system profile. On SIS load, it is filled with the SIS profile code.  # noqa: E501

        :return: The external_id of this User2.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User2.

        The external system from which the user was loaded into Alma. Relevant only for External users. This field is mandatory during the POST and PUT actions for external users, and must match a valid SIS external system profile. On SIS load, it is filled with the SIS profile code.  # noqa: E501

        :param external_id: The external_id of this User2.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def password(self):
        """Gets the password of this User2.  # noqa: E501

        user's password. Relevant for internal users only. Due to security issues, it is returned empty in the GET action. Note that in the PUT action password can be updated, but if left empty - the existing password will be kept.  # noqa: E501

        :return: The password of this User2.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User2.

        user's password. Relevant for internal users only. Due to security issues, it is returned empty in the GET action. Note that in the PUT action password can be updated, but if left empty - the existing password will be kept.  # noqa: E501

        :param password: The password of this User2.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def force_password_change(self):
        """Gets the force_password_change of this User2.  # noqa: E501

        Set this field to 'TRUE' to prompt user to change the password on next log in. Relevant for internal users only.  # noqa: E501

        :return: The force_password_change of this User2.  # noqa: E501
        :rtype: str
        """
        return self._force_password_change

    @force_password_change.setter
    def force_password_change(self, force_password_change):
        """Sets the force_password_change of this User2.

        Set this field to 'TRUE' to prompt user to change the password on next log in. Relevant for internal users only.  # noqa: E501

        :param force_password_change: The force_password_change of this User2.  # noqa: E501
        :type: str
        """

        self._force_password_change = force_password_change

    @property
    def status(self):
        """Gets the status of this User2.  # noqa: E501

        Status of user account. Possible codes are listed in 'Content Structure Status' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is Active.  # noqa: E501

        :return: The status of this User2.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User2.

        Status of user account. Possible codes are listed in 'Content Structure Status' [code table](https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API). Default is Active.  # noqa: E501

        :param status: The status of this User2.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def status_date(self):
        """Gets the status_date of this User2.  # noqa: E501

        The date of the last update to user status.  # noqa: E501

        :return: The status_date of this User2.  # noqa: E501
        :rtype: date
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this User2.

        The date of the last update to user status.  # noqa: E501

        :param status_date: The status_date of this User2.  # noqa: E501
        :type: date
        """

        self._status_date = status_date

    @property
    def requests(self):
        """Gets the requests of this User2.  # noqa: E501

        Number of requests for user. Output parameter.  # noqa: E501

        :return: The requests of this User2.  # noqa: E501
        :rtype: object
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this User2.

        Number of requests for user. Output parameter.  # noqa: E501

        :param requests: The requests of this User2.  # noqa: E501
        :type: object
        """

        self._requests = requests

    @property
    def loans(self):
        """Gets the loans of this User2.  # noqa: E501

        Number of loans for user. Output parameter.  # noqa: E501

        :return: The loans of this User2.  # noqa: E501
        :rtype: object
        """
        return self._loans

    @loans.setter
    def loans(self, loans):
        """Sets the loans of this User2.

        Number of loans for user. Output parameter.  # noqa: E501

        :param loans: The loans of this User2.  # noqa: E501
        :type: object
        """

        self._loans = loans

    @property
    def fees(self):
        """Gets the fees of this User2.  # noqa: E501

        Fines/fees active balance for user Output parameter.  # noqa: E501

        :return: The fees of this User2.  # noqa: E501
        :rtype: object
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this User2.

        Fines/fees active balance for user Output parameter.  # noqa: E501

        :param fees: The fees of this User2.  # noqa: E501
        :type: object
        """

        self._fees = fees

    @property
    def contact_info(self):
        """Gets the contact_info of this User2.  # noqa: E501


        :return: The contact_info of this User2.  # noqa: E501
        :rtype: ContactInfo2
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this User2.


        :param contact_info: The contact_info of this User2.  # noqa: E501
        :type: ContactInfo2
        """

        self._contact_info = contact_info

    @property
    def user_identifier(self):
        """Gets the user_identifier of this User2.  # noqa: E501


        :return: The user_identifier of this User2.  # noqa: E501
        :rtype: UserIdentifiers2
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """Sets the user_identifier of this User2.


        :param user_identifier: The user_identifier of this User2.  # noqa: E501
        :type: UserIdentifiers2
        """

        self._user_identifier = user_identifier

    @property
    def user_role(self):
        """Gets the user_role of this User2.  # noqa: E501


        :return: The user_role of this User2.  # noqa: E501
        :rtype: UserRoles2
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this User2.


        :param user_role: The user_role of this User2.  # noqa: E501
        :type: UserRoles2
        """

        self._user_role = user_role

    @property
    def user_block(self):
        """Gets the user_block of this User2.  # noqa: E501


        :return: The user_block of this User2.  # noqa: E501
        :rtype: UserBlocks2
        """
        return self._user_block

    @user_block.setter
    def user_block(self, user_block):
        """Sets the user_block of this User2.


        :param user_block: The user_block of this User2.  # noqa: E501
        :type: UserBlocks2
        """

        self._user_block = user_block

    @property
    def user_note(self):
        """Gets the user_note of this User2.  # noqa: E501


        :return: The user_note of this User2.  # noqa: E501
        :rtype: UserNotes2
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this User2.


        :param user_note: The user_note of this User2.  # noqa: E501
        :type: UserNotes2
        """

        self._user_note = user_note

    @property
    def user_statistic(self):
        """Gets the user_statistic of this User2.  # noqa: E501


        :return: The user_statistic of this User2.  # noqa: E501
        :rtype: UserStatistics2
        """
        return self._user_statistic

    @user_statistic.setter
    def user_statistic(self, user_statistic):
        """Sets the user_statistic of this User2.


        :param user_statistic: The user_statistic of this User2.  # noqa: E501
        :type: UserStatistics2
        """

        self._user_statistic = user_statistic

    @property
    def proxy_for_user(self):
        """Gets the proxy_for_user of this User2.  # noqa: E501


        :return: The proxy_for_user of this User2.  # noqa: E501
        :rtype: ProxyForUsers
        """
        return self._proxy_for_user

    @proxy_for_user.setter
    def proxy_for_user(self, proxy_for_user):
        """Sets the proxy_for_user of this User2.


        :param proxy_for_user: The proxy_for_user of this User2.  # noqa: E501
        :type: ProxyForUsers
        """

        self._proxy_for_user = proxy_for_user

    @property
    def rs_library(self):
        """Gets the rs_library of this User2.  # noqa: E501


        :return: The rs_library of this User2.  # noqa: E501
        :rtype: RsLibraries2
        """
        return self._rs_library

    @rs_library.setter
    def rs_library(self, rs_library):
        """Sets the rs_library of this User2.


        :param rs_library: The rs_library of this User2.  # noqa: E501
        :type: RsLibraries2
        """

        self._rs_library = rs_library

    @property
    def library_notice(self):
        """Gets the library_notice of this User2.  # noqa: E501


        :return: The library_notice of this User2.  # noqa: E501
        :rtype: LibraryNotices2
        """
        return self._library_notice

    @library_notice.setter
    def library_notice(self, library_notice):
        """Sets the library_notice of this User2.


        :param library_notice: The library_notice of this User2.  # noqa: E501
        :type: LibraryNotices2
        """

        self._library_notice = library_notice

    @property
    def source_link_id(self):
        """Gets the source_link_id of this User2.  # noqa: E501

        Reference to the system internal unique identifier at the institution identified by source_institution_code . This field is populated at the copy user record (linked account). The value is equal to the linking_id at the source institution (identified by source_institution_code).  # noqa: E501

        :return: The source_link_id of this User2.  # noqa: E501
        :rtype: str
        """
        return self._source_link_id

    @source_link_id.setter
    def source_link_id(self, source_link_id):
        """Sets the source_link_id of this User2.

        Reference to the system internal unique identifier at the institution identified by source_institution_code . This field is populated at the copy user record (linked account). The value is equal to the linking_id at the source institution (identified by source_institution_code).  # noqa: E501

        :param source_link_id: The source_link_id of this User2.  # noqa: E501
        :type: str
        """

        self._source_link_id = source_link_id

    @property
    def source_institution_code(self):
        """Gets the source_institution_code of this User2.  # noqa: E501

        The code of the institution where the source user record is managed. This field is populated at the copy user record (linked account).  # noqa: E501

        :return: The source_institution_code of this User2.  # noqa: E501
        :rtype: str
        """
        return self._source_institution_code

    @source_institution_code.setter
    def source_institution_code(self, source_institution_code):
        """Sets the source_institution_code of this User2.

        The code of the institution where the source user record is managed. This field is populated at the copy user record (linked account).  # noqa: E501

        :param source_institution_code: The source_institution_code of this User2.  # noqa: E501
        :type: str
        """

        self._source_institution_code = source_institution_code

    @property
    def linking_id(self):
        """Gets the linking_id of this User2.  # noqa: E501

        The system internal unique identifier of the source user account. This field is populated at the source user record. This can be used to fetch copies of the user record (linked accounts in other institutions) by calling the Get-User API with the source_institution_code parameter.  # noqa: E501

        :return: The linking_id of this User2.  # noqa: E501
        :rtype: str
        """
        return self._linking_id

    @linking_id.setter
    def linking_id(self, linking_id):
        """Sets the linking_id of this User2.

        The system internal unique identifier of the source user account. This field is populated at the source user record. This can be used to fetch copies of the user record (linked accounts in other institutions) by calling the Get-User API with the source_institution_code parameter.  # noqa: E501

        :param linking_id: The linking_id of this User2.  # noqa: E501
        :type: str
        """

        self._linking_id = linking_id

    @property
    def pref_first_name(self):
        """Gets the pref_first_name of this User2.  # noqa: E501

        The user's preferred first name.  # noqa: E501

        :return: The pref_first_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._pref_first_name

    @pref_first_name.setter
    def pref_first_name(self, pref_first_name):
        """Sets the pref_first_name of this User2.

        The user's preferred first name.  # noqa: E501

        :param pref_first_name: The pref_first_name of this User2.  # noqa: E501
        :type: str
        """

        self._pref_first_name = pref_first_name

    @property
    def pref_middle_name(self):
        """Gets the pref_middle_name of this User2.  # noqa: E501

        The user's preferred middle name.  # noqa: E501

        :return: The pref_middle_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._pref_middle_name

    @pref_middle_name.setter
    def pref_middle_name(self, pref_middle_name):
        """Sets the pref_middle_name of this User2.

        The user's preferred middle name.  # noqa: E501

        :param pref_middle_name: The pref_middle_name of this User2.  # noqa: E501
        :type: str
        """

        self._pref_middle_name = pref_middle_name

    @property
    def pref_last_name(self):
        """Gets the pref_last_name of this User2.  # noqa: E501

        The user's preferred last name.  # noqa: E501

        :return: The pref_last_name of this User2.  # noqa: E501
        :rtype: str
        """
        return self._pref_last_name

    @pref_last_name.setter
    def pref_last_name(self, pref_last_name):
        """Sets the pref_last_name of this User2.

        The user's preferred last name.  # noqa: E501

        :param pref_last_name: The pref_last_name of this User2.  # noqa: E501
        :type: str
        """

        self._pref_last_name = pref_last_name

    @property
    def is_researcher(self):
        """Gets the is_researcher of this User2.  # noqa: E501

        Indication whether the user is a researcher. Default is false.  # noqa: E501

        :return: The is_researcher of this User2.  # noqa: E501
        :rtype: bool
        """
        return self._is_researcher

    @is_researcher.setter
    def is_researcher(self, is_researcher):
        """Sets the is_researcher of this User2.

        Indication whether the user is a researcher. Default is false.  # noqa: E501

        :param is_researcher: The is_researcher of this User2.  # noqa: E501
        :type: bool
        """

        self._is_researcher = is_researcher

    @property
    def researcher(self):
        """Gets the researcher of this User2.  # noqa: E501


        :return: The researcher of this User2.  # noqa: E501
        :rtype: RestResearcher
        """
        return self._researcher

    @researcher.setter
    def researcher(self, researcher):
        """Sets the researcher of this User2.


        :param researcher: The researcher of this User2.  # noqa: E501
        :type: RestResearcher
        """

        self._researcher = researcher

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
