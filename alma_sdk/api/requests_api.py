# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alma_sdk.api_client import ApiClient


class RequestsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deletealmawsv1usersuser_idrequestsrequest_id(self, user_id, request_id, reason, **kwargs):  # noqa: E501
        """Cancel user request  # noqa: E501

        This Web service cancels a specific user request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletealmawsv1usersuser_idrequestsrequest_id(user_id, request_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str reason: Code of the cancel reason. Must be a value from the code table 'RequestCancellationReasons' (required)
        :param str note: Note with additional information regarding the cancellation.
        :param bool notify_user: Boolean flag for notifying the requester of the cancellation (when relevant). Defaults to 'true'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletealmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.deletealmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, reason, **kwargs)  # noqa: E501
            return data

    def deletealmawsv1usersuser_idrequestsrequest_id_with_http_info(self, user_id, request_id, reason, **kwargs):  # noqa: E501
        """Cancel user request  # noqa: E501

        This Web service cancels a specific user request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletealmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str reason: Code of the cancel reason. Must be a value from the code table 'RequestCancellationReasons' (required)
        :param str note: Note with additional information regarding the cancellation.
        :param bool notify_user: Boolean flag for notifying the requester of the cancellation (when relevant). Defaults to 'true'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'request_id', 'reason', 'note', 'notify_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletealmawsv1usersuser_idrequestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `deletealmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `deletealmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in params or
                params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `deletealmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'note' in params:
            query_params.append(('note', params['note']))  # noqa: E501
        if 'notify_user' in params:
            query_params.append(('notify_user', params['notify_user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests/{request_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1usersuser_idrequests(self, user_id, request_type, **kwargs):  # noqa: E501
        """Retrieve user requests  # noqa: E501

        This Web service returns list of requests for a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idrequests(user_id, request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_type: Filter results by request type. Optional. Possible values: HOLD, DIGITIZATION, BOOKING. If not supplied, all request types will be returned. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param int limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10.
        :param str offset: Offset of the results returned. Optional.Default value: 0, which means that the first results will be returned. 
        :param str status: Active or History request status. Default is active. The 'history' option is only available if the 'should_anonymize_requests' customer parameter is set to 'false' at the time the request was completed.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_idrequests_with_http_info(user_id, request_type, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_idrequests_with_http_info(user_id, request_type, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_idrequests_with_http_info(self, user_id, request_type, **kwargs):  # noqa: E501
        """Retrieve user requests  # noqa: E501

        This Web service returns list of requests for a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idrequests_with_http_info(user_id, request_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_type: Filter results by request type. Optional. Possible values: HOLD, DIGITIZATION, BOOKING. If not supplied, all request types will be returned. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param int limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10.
        :param str offset: Offset of the results returned. Optional.Default value: 0, which means that the first results will be returned. 
        :param str status: Active or History request status. Default is active. The 'history' option is only available if the 'should_anonymize_requests' customer parameter is set to 'false' at the time the request was completed.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'request_type', 'user_id_type', 'limit', 'offset', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_idrequests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_idrequests`")  # noqa: E501
        # verify the required parameter 'request_type' is set
        if ('request_type' not in params or
                params['request_type'] is None):
            raise ValueError("Missing the required parameter `request_type` when calling `getalmawsv1usersuser_idrequests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'request_type' in params:
            query_params.append(('request_type', params['request_type']))  # noqa: E501
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1usersuser_idrequestsrequest_id(self, user_id, request_id, **kwargs):  # noqa: E501
        """Retrieve user request  # noqa: E501

        This Web service returns a request by a specific request id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idrequestsrequest_id(user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_idrequestsrequest_id_with_http_info(self, user_id, request_id, **kwargs):  # noqa: E501
        """Retrieve user request  # noqa: E501

        This Web service returns a request by a specific request id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'request_id', 'user_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_idrequestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `getalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests/{request_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1usersuser_idresource_sharing_requestsrequest_id(self, user_id, request_id, request_id_type, **kwargs):  # noqa: E501
        """Retrieve user's resource sharing request.  # noqa: E501

        This Web service retrieves a user's resource sharing request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idresource_sharing_requestsrequest_id(user_id, request_id, request_id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: The identifier of the resource sharing request. (required)
        :param str request_id_type: Request ID type. Optional. Use request_id_type=external to search by external identifier. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(user_id, request_id, request_id_type, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(user_id, request_id, request_id_type, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(self, user_id, request_id, request_id_type, **kwargs):  # noqa: E501
        """Retrieve user's resource sharing request.  # noqa: E501

        This Web service retrieves a user's resource sharing request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(user_id, request_id, request_id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: The identifier of the resource sharing request. (required)
        :param str request_id_type: Request ID type. Optional. Use request_id_type=external to search by external identifier. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'request_id', 'request_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_idresource_sharing_requestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `getalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id_type' is set
        if ('request_id_type' not in params or
                params['request_id_type'] is None):
            raise ValueError("Missing the required parameter `request_id_type` when calling `getalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []
        if 'request_id_type' in params:
            query_params.append(('request_id_type', params['request_id_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/resource_sharing_requests/{request_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_iddepositsdeposit_id(self, body, user_id, deposit_id, **kwargs):  # noqa: E501
        """Action on a request  # noqa: E501

        This API performs an update of a deposit. Currently supported: withdraw and submit of a returned/draft deposit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_iddepositsdeposit_id(body, user_id, deposit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Request object. See [here](/alma/apis/docs/xsd/rest_user_deposit.xsd?tags=POST) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str deposit_id: A unique identifier for the deposit (required)
        :param str op: The operation to be performed on the deposit. Mandatory. Currently submit and withdraw are supported.
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_iddepositsdeposit_id_with_http_info(body, user_id, deposit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_iddepositsdeposit_id_with_http_info(body, user_id, deposit_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_iddepositsdeposit_id_with_http_info(self, body, user_id, deposit_id, **kwargs):  # noqa: E501
        """Action on a request  # noqa: E501

        This API performs an update of a deposit. Currently supported: withdraw and submit of a returned/draft deposit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_iddepositsdeposit_id_with_http_info(body, user_id, deposit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Request object. See [here](/alma/apis/docs/xsd/rest_user_deposit.xsd?tags=POST) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str deposit_id: A unique identifier for the deposit (required)
        :param str op: The operation to be performed on the deposit. Mandatory. Currently submit and withdraw are supported.
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'deposit_id', 'op', 'user_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_iddepositsdeposit_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1usersuser_iddepositsdeposit_id`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_iddepositsdeposit_id`")  # noqa: E501
        # verify the required parameter 'deposit_id' is set
        if ('deposit_id' not in params or
                params['deposit_id'] is None):
            raise ValueError("Missing the required parameter `deposit_id` when calling `postalmawsv1usersuser_iddepositsdeposit_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'deposit_id' in params:
            path_params['deposit_id'] = params['deposit_id']  # noqa: E501

        query_params = []
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/deposits/{deposit_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idrequests(self, body, mms_id, item_pid, user_id, **kwargs):  # noqa: E501
        """Create user request  # noqa: E501

        This Web service creates a user's request for a library resource. The request can be for a physical item (request types: hold, booking), or a request for digitizing a file (request type: digitization). The request can be placed on title level or on  item level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idrequests(body, mms_id, item_pid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Request object. See [here](/alma/apis/docs/xsd/rest_user_request.xsd?tags=POST) (required)
        :param str mms_id: The requested title. This parameter is mandatory if the request is in title level. (required)
        :param str item_pid: The requested item ID. This parameter is mandatory if the request is in item level. (required)
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched.  Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idrequests_with_http_info(body, mms_id, item_pid, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idrequests_with_http_info(body, mms_id, item_pid, user_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idrequests_with_http_info(self, body, mms_id, item_pid, user_id, **kwargs):  # noqa: E501
        """Create user request  # noqa: E501

        This Web service creates a user's request for a library resource. The request can be for a physical item (request types: hold, booking), or a request for digitizing a file (request type: digitization). The request can be placed on title level or on  item level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idrequests_with_http_info(body, mms_id, item_pid, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Request object. See [here](/alma/apis/docs/xsd/rest_user_request.xsd?tags=POST) (required)
        :param str mms_id: The requested title. This parameter is mandatory if the request is in title level. (required)
        :param str item_pid: The requested item ID. This parameter is mandatory if the request is in item level. (required)
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched.  Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'mms_id', 'item_pid', 'user_id', 'user_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idrequests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1usersuser_idrequests`")  # noqa: E501
        # verify the required parameter 'mms_id' is set
        if ('mms_id' not in params or
                params['mms_id'] is None):
            raise ValueError("Missing the required parameter `mms_id` when calling `postalmawsv1usersuser_idrequests`")  # noqa: E501
        # verify the required parameter 'item_pid' is set
        if ('item_pid' not in params or
                params['item_pid'] is None):
            raise ValueError("Missing the required parameter `item_pid` when calling `postalmawsv1usersuser_idrequests`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idrequests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'mms_id' in params:
            query_params.append(('mms_id', params['mms_id']))  # noqa: E501
        if 'item_pid' in params:
            query_params.append(('item_pid', params['item_pid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idrequestsrequest_id(self, user_id, request_id, **kwargs):  # noqa: E501
        """Action on a request  # noqa: E501

        This API performs an action on a request. Currently supported: moving digitization requests to their next step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idrequestsrequest_id(user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str op: The operation to be performed on the request. Mandatory. Currently only next_step is supported.
        :param str release_item: Boolean flag for indicating whether to release the item from the request.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idrequestsrequest_id_with_http_info(self, user_id, request_id, **kwargs):  # noqa: E501
        """Action on a request  # noqa: E501

        This API performs an action on a request. Currently supported: moving digitization requests to their next step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idrequestsrequest_id_with_http_info(user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :param str op: The operation to be performed on the request. Mandatory. Currently only next_step is supported.
        :param str release_item: Boolean flag for indicating whether to release the item from the request.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'request_id', 'op', 'release_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idrequestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `postalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'release_item' in params:
            query_params.append(('release_item', params['release_item']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests/{request_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idresource_sharing_requests(self, body, user_id_type, override_blocks, user_id, **kwargs):  # noqa: E501
        """Create user request for resource sharing  # noqa: E501

        This Web service creates a user's request for resource sharing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idresource_sharing_requests(body, user_id_type, override_blocks, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Resource Sharing Request object. See [here](/alma/apis/docs/xsd/rest_user_resource_sharing_request.xsd?tags=POST) (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table. (required)
        :param str override_blocks: Indication whether the request should be created even if blocks exist. optional. By default this is false. (required)
        :param str user_id: A unique identifier for the user (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idresource_sharing_requests_with_http_info(body, user_id_type, override_blocks, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idresource_sharing_requests_with_http_info(body, user_id_type, override_blocks, user_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idresource_sharing_requests_with_http_info(self, body, user_id_type, override_blocks, user_id, **kwargs):  # noqa: E501
        """Create user request for resource sharing  # noqa: E501

        This Web service creates a user's request for resource sharing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idresource_sharing_requests_with_http_info(body, user_id_type, override_blocks, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Resource Sharing Request object. See [here](/alma/apis/docs/xsd/rest_user_resource_sharing_request.xsd?tags=POST) (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table. (required)
        :param str override_blocks: Indication whether the request should be created even if blocks exist. optional. By default this is false. (required)
        :param str user_id: A unique identifier for the user (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id_type', 'override_blocks', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idresource_sharing_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1usersuser_idresource_sharing_requests`")  # noqa: E501
        # verify the required parameter 'user_id_type' is set
        if ('user_id_type' not in params or
                params['user_id_type'] is None):
            raise ValueError("Missing the required parameter `user_id_type` when calling `postalmawsv1usersuser_idresource_sharing_requests`")  # noqa: E501
        # verify the required parameter 'override_blocks' is set
        if ('override_blocks' not in params or
                params['override_blocks'] is None):
            raise ValueError("Missing the required parameter `override_blocks` when calling `postalmawsv1usersuser_idresource_sharing_requests`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idresource_sharing_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'override_blocks' in params:
            query_params.append(('override_blocks', params['override_blocks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/resource_sharing_requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idresource_sharing_requestsrequest_id(self, body, request_id_type, user_id, request_id, **kwargs):  # noqa: E501
        """Operation on request for resource sharing.  # noqa: E501

        This web service performs an operation on a user's request for resource sharing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idresource_sharing_requestsrequest_id(body, request_id_type, user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Resource Sharing Request object. See [here](/alma/apis/docs/xsd/rest_user_resource_sharing_request.xsd?tags=POST) (required)
        :param str request_id_type: Request ID type. Optional. Use request_id_type=external to search by external identifier. (required)
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: The identifier of the resource sharing request. (required)
        :param str op: The operation to be performed on the request. Mandatory. Currently only update_shipping is supported.
        :param str shipping_cost: The updated shipping cost.
        :param str fund_code: The code of the updated fund.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(body, request_id_type, user_id, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(body, request_id_type, user_id, request_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(self, body, request_id_type, user_id, request_id, **kwargs):  # noqa: E501
        """Operation on request for resource sharing.  # noqa: E501

        This web service performs an operation on a user's request for resource sharing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idresource_sharing_requestsrequest_id_with_http_info(body, request_id_type, user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a Resource Sharing Request object. See [here](/alma/apis/docs/xsd/rest_user_resource_sharing_request.xsd?tags=POST) (required)
        :param str request_id_type: Request ID type. Optional. Use request_id_type=external to search by external identifier. (required)
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: The identifier of the resource sharing request. (required)
        :param str op: The operation to be performed on the request. Mandatory. Currently only update_shipping is supported.
        :param str shipping_cost: The updated shipping cost.
        :param str fund_code: The code of the updated fund.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'request_id_type', 'user_id', 'request_id', 'op', 'shipping_cost', 'fund_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idresource_sharing_requestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id_type' is set
        if ('request_id_type' not in params or
                params['request_id_type'] is None):
            raise ValueError("Missing the required parameter `request_id_type` when calling `postalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `postalmawsv1usersuser_idresource_sharing_requestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []
        if 'request_id_type' in params:
            query_params.append(('request_id_type', params['request_id_type']))  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'shipping_cost' in params:
            query_params.append(('shipping_cost', params['shipping_cost']))  # noqa: E501
        if 'fund_code' in params:
            query_params.append(('fund_code', params['fund_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/resource_sharing_requests/{request_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def putalmawsv1usersuser_idrequestsrequest_id(self, body, user_id, request_id, **kwargs):  # noqa: E501
        """Update request  # noqa: E501

        This Web service updates a user's request for a library resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.putalmawsv1usersuser_idrequestsrequest_id(body, user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User Request object. See [here](/alma/apis/docs/xsd/rest_user_request.xsd?tags=PUT) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.putalmawsv1usersuser_idrequestsrequest_id_with_http_info(body, user_id, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.putalmawsv1usersuser_idrequestsrequest_id_with_http_info(body, user_id, request_id, **kwargs)  # noqa: E501
            return data

    def putalmawsv1usersuser_idrequestsrequest_id_with_http_info(self, body, user_id, request_id, **kwargs):  # noqa: E501
        """Update request  # noqa: E501

        This Web service updates a user's request for a library resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.putalmawsv1usersuser_idrequestsrequest_id_with_http_info(body, user_id, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User Request object. See [here](/alma/apis/docs/xsd/rest_user_request.xsd?tags=PUT) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str request_id: A unique identifier of the request that should be canceled. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putalmawsv1usersuser_idrequestsrequest_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `putalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `putalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `putalmawsv1usersuser_idrequestsrequest_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/requests/{request_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
