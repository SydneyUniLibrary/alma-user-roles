# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alma_sdk.api_client import ApiClient


class LegantoNotificationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def getalmawsv1usersuser_nameleganto_notifications(self, user_name, notification_type, _from, to, **kwargs):  # noqa: E501
        """Retrieve user leganto notifications  # noqa: E501

        This Web service returns list of leganto notifications for a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_nameleganto_notifications(user_name, notification_type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: The user_name of the user (required)
        :param str notification_type: Filter results by notification type. Optional. Possible values are listed in code_table_SystemEventTypes (required)
        :param str _from: From this Date (YYYY-MM-DD). Optional. Defaults to today. (required)
        :param str to: To this date (YYYY-MM-DD). Optional. Defaults to the From Date plus one week. (required)
        :param str limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_nameleganto_notifications_with_http_info(user_name, notification_type, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_nameleganto_notifications_with_http_info(user_name, notification_type, _from, to, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_nameleganto_notifications_with_http_info(self, user_name, notification_type, _from, to, **kwargs):  # noqa: E501
        """Retrieve user leganto notifications  # noqa: E501

        This Web service returns list of leganto notifications for a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_nameleganto_notifications_with_http_info(user_name, notification_type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: The user_name of the user (required)
        :param str notification_type: Filter results by notification type. Optional. Possible values are listed in code_table_SystemEventTypes (required)
        :param str _from: From this Date (YYYY-MM-DD). Optional. Defaults to today. (required)
        :param str to: To this date (YYYY-MM-DD). Optional. Defaults to the From Date plus one week. (required)
        :param str limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'notification_type', '_from', 'to', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_nameleganto_notifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `getalmawsv1usersuser_nameleganto_notifications`")  # noqa: E501
        # verify the required parameter 'notification_type' is set
        if ('notification_type' not in params or
                params['notification_type'] is None):
            raise ValueError("Missing the required parameter `notification_type` when calling `getalmawsv1usersuser_nameleganto_notifications`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `getalmawsv1usersuser_nameleganto_notifications`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `getalmawsv1usersuser_nameleganto_notifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []
        if 'notification_type' in params:
            query_params.append(('notificationType', params['notification_type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_name}/leganto-notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
