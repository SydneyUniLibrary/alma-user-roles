# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alma_sdk.api_client import ApiClient


class FinesAndFeesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def getalmawsv1usersuser_idfees(self, user_id, **kwargs):  # noqa: E501
        """Get user fines/fees  # noqa: E501

        This API returns a user's fines and fees.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idfees(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str status: Return fees of this status only. Optional. If this is not provided, all active fees will be returned. The values that can be used are {ACTIVE|INDISPUTE|EXPORTED}.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_idfees_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_idfees_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_idfees_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user fines/fees  # noqa: E501

        This API returns a user's fines and fees.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idfees_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str status: Return fees of this status only. Optional. If this is not provided, all active fees will be returned. The values that can be used are {ACTIVE|INDISPUTE|EXPORTED}.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_id_type', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_idfees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_idfees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/fees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1usersuser_idfeesfee_id(self, user_id, fee_id, **kwargs):  # noqa: E501
        """Get user fine/fee  # noqa: E501

        This API returns a specific fine or fee for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idfeesfee_id(user_id, fee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str fee_id: The fine/fee identifier (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_idfeesfee_id_with_http_info(self, user_id, fee_id, **kwargs):  # noqa: E501
        """Get user fine/fee  # noqa: E501

        This API returns a specific fine or fee for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str fee_id: The fine/fee identifier (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'fee_id', 'user_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_idfeesfee_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_idfeesfee_id`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `getalmawsv1usersuser_idfeesfee_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['fee_id'] = params['fee_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/fees/{fee_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idfees(self, body, user_id, **kwargs):  # noqa: E501
        """Create user fine/fee  # noqa: E501

        This API creates a fine or fee for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfees(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a fee object See [here](/alma/apis/docs/xsd/rest_fee.xsd?tags=POST) (required)
        :param str user_id: A unique identifier for the user (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idfees_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idfees_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idfees_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Create user fine/fee  # noqa: E501

        This API creates a fine or fee for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfees_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a fee object See [here](/alma/apis/docs/xsd/rest_fee.xsd?tags=POST) (required)
        :param str user_id: A unique identifier for the user (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idfees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1usersuser_idfees`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idfees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/fees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idfeesall(self, user_id, op, **kwargs):  # noqa: E501
        """Pay user fines/fees  # noqa: E501

        This API posts a payment against a specific user's fines and fees as a whole.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfeesall(user_id, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str op: The operation to be performed on the user's specified fee. Mandatory. Currently only op=pay is supported (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str amount: The amount of the payment to be made on the user's specified fees. To pay the entire balance use amount=ALL
        :param str method: The Payment method. Relevant and mandatory if op=pay. Options are CREDIT_CARD, ONLINE, or CASH
        :param str comment: A note that can be attached to the payment action. Optional.
        :param str external_transaction_id: An external payment system transaction ID. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idfeesall_with_http_info(user_id, op, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idfeesall_with_http_info(user_id, op, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idfeesall_with_http_info(self, user_id, op, **kwargs):  # noqa: E501
        """Pay user fines/fees  # noqa: E501

        This API posts a payment against a specific user's fines and fees as a whole.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfeesall_with_http_info(user_id, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str op: The operation to be performed on the user's specified fee. Mandatory. Currently only op=pay is supported (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str amount: The amount of the payment to be made on the user's specified fees. To pay the entire balance use amount=ALL
        :param str method: The Payment method. Relevant and mandatory if op=pay. Options are CREDIT_CARD, ONLINE, or CASH
        :param str comment: A note that can be attached to the payment action. Optional.
        :param str external_transaction_id: An external payment system transaction ID. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'op', 'user_id_type', 'amount', 'method', 'comment', 'external_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idfeesall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idfeesall`")  # noqa: E501
        # verify the required parameter 'op' is set
        if ('op' not in params or
                params['op'] is None):
            raise ValueError("Missing the required parameter `op` when calling `postalmawsv1usersuser_idfeesall`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'external_transaction_id' in params:
            query_params.append(('external_transaction_id', params['external_transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/fees/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_idfeesfee_id(self, user_id, fee_id, op, **kwargs):  # noqa: E501
        """Pay/waive/dispute/restore user fine/fee  # noqa: E501

        This API applies the specified operation to a specific fine/fee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfeesfee_id(user_id, fee_id, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str fee_id: The fine/fee identifier (required)
        :param str op: The operation to be performed on the user's specified fee. Mandatory. Options are pay, waive, dispute or restore (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str amount: The amount of the payment to be made on the user's specified fees. Relevant for op=pay,waive
        :param str method: The Payment method. Relevant and mandatory if op=pay. Options are CREDIT_CARD, ONLINE, or CASH
        :param str reason: The reason for waiving the fine/fee. Mandatory if op=waive. The value should be one of the codes from the Reasons for Transactions code table.
        :param str comment: A note that can be attached to the action. Optional.
        :param str external_transaction_id: An external payment system transaction ID. Relevant for op=pay
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, op, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, op, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_idfeesfee_id_with_http_info(self, user_id, fee_id, op, **kwargs):  # noqa: E501
        """Pay/waive/dispute/restore user fine/fee  # noqa: E501

        This API applies the specified operation to a specific fine/fee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_idfeesfee_id_with_http_info(user_id, fee_id, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str fee_id: The fine/fee identifier (required)
        :param str op: The operation to be performed on the user's specified fee. Mandatory. Options are pay, waive, dispute or restore (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str amount: The amount of the payment to be made on the user's specified fees. Relevant for op=pay,waive
        :param str method: The Payment method. Relevant and mandatory if op=pay. Options are CREDIT_CARD, ONLINE, or CASH
        :param str reason: The reason for waiving the fine/fee. Mandatory if op=waive. The value should be one of the codes from the Reasons for Transactions code table.
        :param str comment: A note that can be attached to the action. Optional.
        :param str external_transaction_id: An external payment system transaction ID. Relevant for op=pay
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'fee_id', 'op', 'user_id_type', 'amount', 'method', 'reason', 'comment', 'external_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_idfeesfee_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_idfeesfee_id`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `postalmawsv1usersuser_idfeesfee_id`")  # noqa: E501
        # verify the required parameter 'op' is set
        if ('op' not in params or
                params['op'] is None):
            raise ValueError("Missing the required parameter `op` when calling `postalmawsv1usersuser_idfeesfee_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['fee_id'] = params['fee_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'external_transaction_id' in params:
            query_params.append(('external_transaction_id', params['external_transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}/fees/{fee_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
