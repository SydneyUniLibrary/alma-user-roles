# coding: utf-8

"""
    Ex Libris APIs

    For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alma_sdk.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deletealmawsv1usersuser_id(self, user_id, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        This Web service deletes a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletealmawsv1usersuser_id(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletealmawsv1usersuser_id_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletealmawsv1usersuser_id_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def deletealmawsv1usersuser_id_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        This Web service deletes a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletealmawsv1usersuser_id_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_id_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletealmawsv1usersuser_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `deletealmawsv1usersuser_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1users(self, **kwargs):  # noqa: E501
        """Retrieve users  # noqa: E501

        This API returns a list of Users, sorted by last name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10.
        :param int offset: Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned.
        :param str q: Search query. Optional. Searching for words from: primary_id, first_name, last_name, middle_name, email, job_category, identifiers, general_info and ALL. Example (note the tilde between the code and text): q=last_name~Smith (see [Brief Search](https://developers.exlibrisgroup.com/blog/How-we-re-building-APIs-at-Ex-Libris#BriefSearch))
        :param str order_by: A few sort options are available: last_name, first_name and primary_id. One sort option may be used at a time. A secondary sort key, primary_id, is added if last_name or first_name is the primary sort. Default sorting is by all three in the following order: last_name, first_name, primary_id. If the query option is used, the result will not sort by primary_id.
        :param str source_institution_code: The code of the source institution from which the user was linked. Optional
        :param str source_user_id: The ID of the user in the source institution. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1users_with_http_info(**kwargs)  # noqa: E501
            return data

    def getalmawsv1users_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve users  # noqa: E501

        This API returns a list of Users, sorted by last name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limits the number of results. Optional. Valid values are 0-100. Default value: 10.
        :param int offset: Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned.
        :param str q: Search query. Optional. Searching for words from: primary_id, first_name, last_name, middle_name, email, job_category, identifiers, general_info and ALL. Example (note the tilde between the code and text): q=last_name~Smith (see [Brief Search](https://developers.exlibrisgroup.com/blog/How-we-re-building-APIs-at-Ex-Libris#BriefSearch))
        :param str order_by: A few sort options are available: last_name, first_name and primary_id. One sort option may be used at a time. A secondary sort key, primary_id, is added if last_name or first_name is the primary sort. Default sorting is by all three in the following order: last_name, first_name, primary_id. If the query option is used, the result will not sort by primary_id.
        :param str source_institution_code: The code of the source institution from which the user was linked. Optional
        :param str source_user_id: The ID of the user in the source institution. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'q', 'order_by', 'source_institution_code', 'source_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'source_institution_code' in params:
            query_params.append(('source_institution_code', params['source_institution_code']))  # noqa: E501
        if 'source_user_id' in params:
            query_params.append(('source_user_id', params['source_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getalmawsv1usersuser_id(self, user_id, **kwargs):  # noqa: E501
        """Get user details  # noqa: E501

        This Web service returns a specific user's details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_id(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table. The value may also be linking_id.  To search for users which have linked accounts in other institutions according to the linking_id use user_id_type=linking_id.
        :param str view: Special view of User object. Optional. Possible values: full - full User object will be returned. brief - only user's core information, emails, identifiers and statistics are returned. By default, the full User object will be returned.
        :param str expand: This parameter allows for expanding on some user information. Three options are available: loans-Include the total number of loans; requests-Include the total number of requests; fees-Include the balance of fees. To have more than one option, use a comma separator.
        :param str source_institution_code: The source institution Code. Optional. When used the user_id is used to locate a copied user (linked account) based on source_link_id.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getalmawsv1usersuser_id_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getalmawsv1usersuser_id_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def getalmawsv1usersuser_id_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user details  # noqa: E501

        This Web service returns a specific user's details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getalmawsv1usersuser_id_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table. The value may also be linking_id.  To search for users which have linked accounts in other institutions according to the linking_id use user_id_type=linking_id.
        :param str view: Special view of User object. Optional. Possible values: full - full User object will be returned. brief - only user's core information, emails, identifiers and statistics are returned. By default, the full User object will be returned.
        :param str expand: This parameter allows for expanding on some user information. Three options are available: loans-Include the total number of loans; requests-Include the total number of requests; fees-Include the balance of fees. To have more than one option, use a comma separator.
        :param str source_institution_code: The source institution Code. Optional. When used the user_id is used to locate a copied user (linked account) based on source_link_id.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_id_type', 'view', 'expand', 'source_institution_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getalmawsv1usersuser_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `getalmawsv1usersuser_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'source_institution_code' in params:
            query_params.append(('source_institution_code', params['source_institution_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1users(self, body, **kwargs):  # noqa: E501
        """Create user  # noqa: E501

        This Web service creates a new user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1users(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User object. See [here](/alma/apis/docs/xsd/rest_user.xsd?tags=POST) (required)
        :param str social_authentication: When customer parameter social_authentication='True': Send social authentication email to patron. Default value: False.
        :param str send_pin_number_letter: The email notification for PIN setting change will be sent
        :param str source_institution_code: The code of the source institution from which the user was linked. Optional
        :param str source_user_id: The ID of the user in the source institution. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1users_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1users_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def postalmawsv1users_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create user  # noqa: E501

        This Web service creates a new user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1users_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User object. See [here](/alma/apis/docs/xsd/rest_user.xsd?tags=POST) (required)
        :param str social_authentication: When customer parameter social_authentication='True': Send social authentication email to patron. Default value: False.
        :param str send_pin_number_letter: The email notification for PIN setting change will be sent
        :param str source_institution_code: The code of the source institution from which the user was linked. Optional
        :param str source_user_id: The ID of the user in the source institution. Optional.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'social_authentication', 'send_pin_number_letter', 'source_institution_code', 'source_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postalmawsv1users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'social_authentication' in params:
            query_params.append(('social_authentication', params['social_authentication']))  # noqa: E501
        if 'send_pin_number_letter' in params:
            query_params.append(('send_pin_number_letter', params['send_pin_number_letter']))  # noqa: E501
        if 'source_institution_code' in params:
            query_params.append(('source_institution_code', params['source_institution_code']))  # noqa: E501
        if 'source_user_id' in params:
            query_params.append(('source_user_id', params['source_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postalmawsv1usersuser_id(self, user_id, password, **kwargs):  # noqa: E501
        """Authenticate or refresh user  # noqa: E501

        This Web service runs a user authentication process or refreshes a linked user in Alma.   Refresh operation requires a user at the local institution that is linked to a user at another institution.  Authentication operation requires a password which may be entered as a parameter or with the header: Exl-User-Pw  Successful authentication or refresh will result with an HTTP 204 (success - no content) response.  This API is meant for internal users where Alma is the identity provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_id(user_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str password: Add the user's password. Or, enter the password in the header Exl-User-Pw. A password is mandatory for op=auth. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str op: The operation to be performed on the user. Mandatory. Currently op=auth or op=refresh are supported.  The default is auth.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postalmawsv1usersuser_id_with_http_info(user_id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.postalmawsv1usersuser_id_with_http_info(user_id, password, **kwargs)  # noqa: E501
            return data

    def postalmawsv1usersuser_id_with_http_info(self, user_id, password, **kwargs):  # noqa: E501
        """Authenticate or refresh user  # noqa: E501

        This Web service runs a user authentication process or refreshes a linked user in Alma.   Refresh operation requires a user at the local institution that is linked to a user at another institution.  Authentication operation requires a password which may be entered as a parameter or with the header: Exl-User-Pw  Successful authentication or refresh will result with an HTTP 204 (success - no content) response.  This API is meant for internal users where Alma is the identity provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postalmawsv1usersuser_id_with_http_info(user_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: A unique identifier for the user (required)
        :param str password: Add the user's password. Or, enter the password in the header Exl-User-Pw. A password is mandatory for op=auth. (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str op: The operation to be performed on the user. Mandatory. Currently op=auth or op=refresh are supported.  The default is auth.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'password', 'user_id_type', 'op']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postalmawsv1usersuser_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `postalmawsv1usersuser_id`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `postalmawsv1usersuser_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def putalmawsv1usersuser_id(self, body, user_id, **kwargs):  # noqa: E501
        """Update User Details  # noqa: E501

        This Web service updates a specific user's details.     The update is done in a 'Swap All' mode: existing fields' information will be replaced with the incoming information. Incoming lists will replace existing lists.   Exception for this are the following fields:   roles - if the incoming list does not contain roles, exsiting roles will be kept.    External users: User group, Job title, PIN number, User language, Resource sharing libraries, Campus code and User title: these fields will not be replaced if updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.putalmawsv1usersuser_id(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User object. See [here](/alma/apis/docs/xsd/rest_user.xsd?tags=PUT) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str override: The following fields of the user object are not replaced if they were updated manually:   user_group, job_category, pin_number, preferred_language, campus_code, rs_libraries, user_title, library_notices.   To update these fields, specify the fields you want to replace in this parameter.   For example override=user_group,job_category. Default is empty.
        :param str send_pin_number_letter: The email notification for PIN setting change will be sent
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.putalmawsv1usersuser_id_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.putalmawsv1usersuser_id_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def putalmawsv1usersuser_id_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Update User Details  # noqa: E501

        This Web service updates a specific user's details.     The update is done in a 'Swap All' mode: existing fields' information will be replaced with the incoming information. Incoming lists will replace existing lists.   Exception for this are the following fields:   roles - if the incoming list does not contain roles, exsiting roles will be kept.    External users: User group, Job title, PIN number, User language, Resource sharing libraries, Campus code and User title: these fields will not be replaced if updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.putalmawsv1usersuser_id_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: This method takes a User object. See [here](/alma/apis/docs/xsd/rest_user.xsd?tags=PUT) (required)
        :param str user_id: A unique identifier for the user (required)
        :param str user_id_type: The type of identifier that is being searched. Optional. If this is not provided, all unique identifier types are used. The values that can be used are any of the values in the User Identifier Type code table.
        :param str override: The following fields of the user object are not replaced if they were updated manually:   user_group, job_category, pin_number, preferred_language, campus_code, rs_libraries, user_title, library_notices.   To update these fields, specify the fields you want to replace in this parameter.   For example override=user_group,job_category. Default is empty.
        :param str send_pin_number_letter: The email notification for PIN setting change will be sent
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'user_id_type', 'override', 'send_pin_number_letter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putalmawsv1usersuser_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `putalmawsv1usersuser_id`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `putalmawsv1usersuser_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'user_id_type' in params:
            query_params.append(('user_id_type', params['user_id_type']))  # noqa: E501
        if 'override' in params:
            query_params.append(('override', params['override']))  # noqa: E501
        if 'send_pin_number_letter' in params:
            query_params.append(('send_pin_number_letter', params['send_pin_number_letter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/almaws/v1/users/{user_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
